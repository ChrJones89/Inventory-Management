/****************************************************************************
**
** Namespace DYMO_Label_Framework generated by dumpcpp from type library
** DYMO.Label.Framework.tlb
**
****************************************************************************/

#ifndef QAX_DUMPCPP_DYMOSDK_H
#define QAX_DUMPCPP_DYMOSDK_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef DYMO_LABEL_FRAMEWORK_EXPORT
#define DYMO_LABEL_FRAMEWORK_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace
namespace mscorlib {
    class _Type;
}

namespace stdole {
    class IEnumVARIANT;
}


namespace DYMO_Label_Framework {

    enum BarcodeError {
        BarcodeError_None       = 0,
        BarcodeError_InvalidChar= 1,
        BarcodeError_TooLong    = 2,
        BarcodeError_NoText     = 3,
        BarcodeError_Unsupported= 4,
        BarcodeError_NumericOnly= 5,
        BarcodeError_OddCount   = 6,
        BarcodeError_HasControl = 7,
        BarcodeError_HasLowerCase= 8,
        BarcodeError_HasHighChars= 9,
        BarcodeError_InvalidStartStop= 10,
        BarcodeError_PostnetLength= 11,
        BarcodeError_LibLength  = 12,
        BarcodeError_PlanetLength= 13,
        BarcodeError_ECLevel    = 14,
        BarcodeError_IMail_LoadLibrary= 15,
        BarcodeError_IMail_SelftestFailed= 16,
        BarcodeError_IMail_BarStringIsNull= 17,
        BarcodeError_IMail_ByteConversionFailed= 18,
        BarcodeError_IMail_RetriveTableFailed= 19,
        BarcodeError_IMail_CodewordConversionFailed= 20,
        BarcodeError_IMail_CharacterRangeError= 21,
        BarcodeError_IMail_TrackStringIsNull= 22,
        BarcodeError_IMail_RouteStringIsNull= 23,
        BarcodeError_IMail_TrackStringBadLength= 24,
        BarcodeError_IMail_TrackStringHasInvalidData= 25,
        BarcodeError_IMail_TrackStringHasInvalidDigit2= 26,
        BarcodeError_IMail_RouteStringBadLength= 27,
        BarcodeError_IMail_RouteStringHasInvalidData= 28
    };

    enum BarcodeSize {
        BarcodeSize_Small       = 0,
        BarcodeSize_Medium      = 1,
        BarcodeSize_Large       = 2
    };

    enum BarcodeTextPosition {
        BarcodeTextPosition_None= 0,
        BarcodeTextPosition_Top = 1,
        BarcodeTextPosition_Bottom= 2
    };

    enum BarcodeType {
        BarcodeType_Unknown     = 0,
        BarcodeType_Code39      = 1,
        BarcodeType_Code39CS    = 2,
        BarcodeType_Code128Auto = 3,
        BarcodeType_Code128A    = 4,
        BarcodeType_Code128B    = 5,
        BarcodeType_Code128C    = 6,
        BarcodeType_Code2of5    = 7,
        BarcodeType_UpcA        = 8,
        BarcodeType_UpcE        = 9,
        BarcodeType_Ean8        = 10,
        BarcodeType_Ean13       = 11,
        BarcodeType_Codabar     = 12,
        BarcodeType_Postnet     = 13,
        BarcodeType_Code39LibR  = 14,
        BarcodeType_Code39LibL  = 15,
        BarcodeType_CodabarLibR = 16,
        BarcodeType_CodabarLibL = 17,
        BarcodeType_Code128Ean  = 18,
        BarcodeType_Itf14       = 19,
        BarcodeType_Planet      = 20,
        BarcodeType_Pdf417      = 21,
        BarcodeType_QRCode      = 22,
        BarcodeType_IMail       = 23
    };

    enum CircleTextAlignment {
        CircleTextAlignment_CenterAtTop= 0,
        CircleTextAlignment_CenterAtBottom= 1,
        CircleTextAlignment_StartAngle= 2
    };

    enum ContinuousLabelCellSizeMode {
        ContinuousLabelCellSizeMode_Auto= 0,
        ContinuousLabelCellSizeMode_Fixed= 1,
        ContinuousLabelCellSizeMode_Star= 2
    };

    enum ContinuousLabelLengthMode {
        ContinuousLabelLengthMode_Auto= 0,
        ContinuousLabelLengthMode_Fixed= 1
    };

    enum ContinuousSubcellsOrientation {
        ContinuousSubcellsOrientation_Horizontal= 0,
        ContinuousSubcellsOrientation_Vertical= 1
    };

    enum CurcularTextDisplayMode {
        CurcularTextDisplayMode_ArcTextTop= 0,
        CurcularTextDisplayMode_ArcTextBottom= 1,
        CurcularTextDisplayMode_CircularText= 2
    };

    enum DashStyle {
        DashStyle_Solid         = 0,
        DashStyle_Dash          = 1,
        DashStyle_Dot           = 2,
        DashStyle_DashDot       = 3,
        DashStyle_DashDotDot    = 4,
        DashStyle_LongDash      = 5
    };

    enum DateFormat {
        DateFormat_None         = 0,
        DateFormat_LongSystemDate= 1,
        DateFormat_ShortSystemDate= 2,
        DateFormat_WeekdayLongMonthDayLongYear= 3,
        DateFormat_WeekdayDayLongMonthLongYear= 4,
        DateFormat_AbbrWeekdayAbbrMonthDayLongYear= 5,
        DateFormat_AbbrWeekdayDayAbbrMonthLongYear= 6,
        DateFormat_LongMonthDayLongYear= 7,
        DateFormat_DayLongMonthLongYear= 8,
        DateFormat_MonthDayLongYear= 9,
        DateFormat_DayMonthLongYear= 10,
        DateFormat_MonthDayYear = 11,
        DateFormat_DayMonthYear = 12,
        DateFormat_AbbrMonthDayLongYear= 13,
        DateFormat_AbbrMonthDayYear= 14,
        DateFormat_DayAbbrMonthLongYear= 15,
        DateFormat_DayAbbrMonthYear= 16
    };

    enum FlowDirection {
        FlowDirection_LeftToRight= 0,
        FlowDirection_RightToLeft= 1
    };

    enum FontStyle {
        FontStyle_None          = 0,
        FontStyle_Bold          = 1,
        FontStyle_Italic        = 2,
        FontStyle_Underline     = 4,
        FontStyle_Strikeout     = 8
    };

    enum HorizontalAlignment {
        HorizontalAlignment_Center= 0,
        HorizontalAlignment_Left= 1,
        HorizontalAlignment_Right= 2
    };

    enum ImageScaleMode {
        ImageScaleMode_None     = 0,
        ImageScaleMode_Fill     = 1,
        ImageScaleMode_Uniform  = 2
    };

    enum LabelWriterPrintQuality {
        LabelWriterPrintQuality_Text= 0,
        LabelWriterPrintQuality_BarcodeAndGraphics= 1,
        LabelWriterPrintQuality_Auto= 2
    };

    enum ObjectRotation {
        ObjectRotation_Rotation0= 0,
        ObjectRotation_Rotation90= 90,
        ObjectRotation_Rotation180= 180,
        ObjectRotation_Rotation270= 270
    };

    enum PaperOrientation {
        PaperOrientation_Portrait= 1,
        PaperOrientation_Landscape= 2
    };

    enum PostnetBarcodePosition {
        PostnetBarcodePosition_Suppress= 0,
        PostnetBarcodePosition_AboveAddress= 1,
        PostnetBarcodePosition_BelowAddress= 2
    };

    enum RollSelection {
        RollSelection_Auto      = 15,
        RollSelection_Left      = 258,
        RollSelection_Right     = 257
    };

    enum ShapeType {
        ShapeType_Rectangle     = 0,
        ShapeType_Ellipse       = 1,
        ShapeType_HorizontalLine= 2,
        ShapeType_VerticalLine  = 3
    };

    enum TapeAlignment {
        TapeAlignment_Center    = 0,
        TapeAlignment_Left      = 1,
        TapeAlignment_Right     = 2
    };

    enum TapeCutMode {
        TapeCutMode_AutoCut     = 0,
        TapeCutMode_ChainMarks  = 1
    };

    enum TextAlignment {
        TextAlignment_Left      = 0,
        TextAlignment_Center    = 1,
        TextAlignment_CenterBlock= 2,
        TextAlignment_Right     = 3
    };

    enum TextFitMode {
        TextFitMode_None        = 0,
        TextFitMode_ShrinkToFit = 1,
        TextFitMode_AlwaysFit   = 2
    };

    enum TextVerticalAlignment {
        TextVerticalAlignment_Top= 0,
        TextVerticalAlignment_Middle= 1,
        TextVerticalAlignment_Bottom= 2
    };

    enum VerticalAlignment {
        VerticalAlignment_Center= 0,
        VerticalAlignment_Top   = 1,
        VerticalAlignment_Bottom= 2
    };

// forward declarations
    enum FlowDirection;
    enum RollSelection;
    enum LabelWriterPrintQuality;
    enum PostnetBarcodePosition;
    enum TextAlignment;
    enum TextVerticalAlignment;
    enum HorizontalAlignment;
    enum VerticalAlignment;
    enum TextFitMode;
    enum ObjectRotation;
    enum ContinuousLabelLengthMode;
    enum FontStyle;
    enum TapeAlignment;
    enum TapeCutMode;
    enum BarcodeType;
    enum BarcodeSize;
    enum BarcodeTextPosition;
    enum BarcodeError;
    enum ImageScaleMode;
    enum ShapeType;
    enum DateFormat;
    enum CurcularTextDisplayMode;
    enum CircleTextAlignment;
    enum PaperOrientation;
    enum ContinuousSubcellsOrientation;
    enum ContinuousLabelCellSizeMode;
    enum DashStyle;
    class IFontInfo;
    class IColor;
    class IPrinter;
    class IPrintJob;
    class IPrintParams;
    class ILabel;
    class ILabelObjects;
    class IStringList;
    class ILabelObject;
    class ILabelRenderParams;
    class IRect;
    enum FlowDirection;
    enum RollSelection;
    enum LabelWriterPrintQuality;
    enum PostnetBarcodePosition;
    enum TextAlignment;
    enum TextVerticalAlignment;
    enum HorizontalAlignment;
    enum VerticalAlignment;
    enum TextFitMode;
    enum ObjectRotation;
    enum ContinuousLabelLengthMode;
    enum FontStyle;
    enum TapeAlignment;
    enum TapeCutMode;
    enum BarcodeType;
    enum BarcodeSize;
    enum BarcodeTextPosition;
    enum BarcodeError;
    enum ImageScaleMode;
    enum ShapeType;
    enum DateFormat;
    enum CurcularTextDisplayMode;
    enum CircleTextAlignment;
    enum PaperOrientation;
    enum ContinuousSubcellsOrientation;
    enum ContinuousLabelCellSizeMode;
    enum DashStyle;
    class IPrinters;
    class IThickness;
    class IDieCutLabel;
    class IContinuousLabel;
    class IWebProxy;
    class IContinuousLabelCell;
    class IContinuousLabelCellList;
    class IStyledText;
    class ILabelRecordBuilder;
    class IStyledTextBlock;

class DYMO_LABEL_FRAMEWORK_EXPORT ILabelObject : public QAxObject
{
public:
    ILabelObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectType
    */
    inline QString ObjectType() const; //Returns the value of ObjectType

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IBarcodeObject : public QAxObject
{
public:
    IBarcodeObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BarcodeSize
    */
    inline DYMO_Label_Framework::BarcodeSize BarcodeSize() const; //Returns the value of BarcodeSize
    inline void SetBarcodeSize(DYMO_Label_Framework::BarcodeSize value); //Sets the value of the BarcodeSize property

    /*
    Property BarcodeText
    */
    inline QString BarcodeText() const; //Returns the value of BarcodeText
    inline void SetBarcodeText(const QString& value); //Sets the value of the BarcodeText property

    /*
    Property BarcodeType
    */
    inline DYMO_Label_Framework::BarcodeType BarcodeType() const; //Returns the value of BarcodeType
    inline void SetBarcodeType(DYMO_Label_Framework::BarcodeType value); //Sets the value of the BarcodeType property

    /*
    Property HorizontalAlignment
    */
    inline DYMO_Label_Framework::HorizontalAlignment HorizontalAlignment() const; //Returns the value of HorizontalAlignment
    inline void SetHorizontalAlignment(DYMO_Label_Framework::HorizontalAlignment value); //Sets the value of the HorizontalAlignment property

    /*
    Property LinkedObjectName
    */
    inline QString LinkedObjectName() const; //Returns the value of LinkedObjectName
    inline void SetLinkedObjectName(const QString& value); //Sets the value of the LinkedObjectName property

    /*
    Property Rotation
    */
    inline DYMO_Label_Framework::ObjectRotation Rotation() const; //Returns the value of Rotation
    inline void SetRotation(DYMO_Label_Framework::ObjectRotation value); //Sets the value of the Rotation property

    /*
    Property TextFont
    */
    inline DYMO_Label_Framework::IFontInfo* TextFont() const; //Returns the value of TextFont
    inline void SetTextFont(DYMO_Label_Framework::IFontInfo* value); //Sets the value of the TextFont property

    /*
    Property TextPosition
    */
    inline DYMO_Label_Framework::BarcodeTextPosition TextPosition() const; //Returns the value of TextPosition
    inline void SetTextPosition(DYMO_Label_Framework::BarcodeTextPosition value); //Sets the value of the TextPosition property

    /*
    Method Validate
    */
    inline BarcodeError Validate();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IAddressObject : public QAxObject
{
public:
    IAddressObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackgroundColor
    */
    inline DYMO_Label_Framework::IColor* BackgroundColor() const; //Returns the value of BackgroundColor
    inline void SetBackgroundColor(DYMO_Label_Framework::IColor* value); //Sets the value of the BackgroundColor property

    /*
    Property BarcodePosition
    */
    inline DYMO_Label_Framework::PostnetBarcodePosition BarcodePosition() const; //Returns the value of BarcodePosition
    inline void SetBarcodePosition(DYMO_Label_Framework::PostnetBarcodePosition value); //Sets the value of the BarcodePosition property

    /*
    Property FitMode
    */
    inline DYMO_Label_Framework::TextFitMode FitMode() const; //Returns the value of FitMode
    inline void SetFitMode(DYMO_Label_Framework::TextFitMode value); //Sets the value of the FitMode property

    /*
    Property HorizontalAlignment
    */
    inline DYMO_Label_Framework::TextAlignment HorizontalAlignment() const; //Returns the value of HorizontalAlignment
    inline void SetHorizontalAlignment(DYMO_Label_Framework::TextAlignment value); //Sets the value of the HorizontalAlignment property

    /*
    Property IsMirrored
    */
    inline bool IsMirrored() const; //Returns the value of IsMirrored
    inline void SetIsMirrored(bool value); //Sets the value of the IsMirrored property

    /*
    Property LineCount
    */
    inline int LineCount() const; //Returns the value of LineCount

    /*
    Property Rotation
    */
    inline DYMO_Label_Framework::ObjectRotation Rotation() const; //Returns the value of Rotation
    inline void SetRotation(DYMO_Label_Framework::ObjectRotation value); //Sets the value of the Rotation property

    /*
    Property Text
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property TextColor
    */
    inline DYMO_Label_Framework::IColor* TextColor() const; //Returns the value of TextColor
    inline void SetTextColor(DYMO_Label_Framework::IColor* value); //Sets the value of the TextColor property

    /*
    Property TextMarkup
    */
    inline QString TextMarkup() const; //Returns the value of TextMarkup
    inline void SetTextMarkup(const QString& value); //Sets the value of the TextMarkup property

    /*
    Property VerticalAlignment
    */
    inline DYMO_Label_Framework::TextVerticalAlignment VerticalAlignment() const; //Returns the value of VerticalAlignment
    inline void SetVerticalAlignment(DYMO_Label_Framework::TextVerticalAlignment value); //Sets the value of the VerticalAlignment property

    /*
    Method SetLineFont
    */
    inline void SetLineFont(int lineNo, DYMO_Label_Framework::IFontInfo* FontInfo);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IRect : public QAxObject
{
public:
    IRect(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Height
    */
    inline double Height() const; //Returns the value of Height

    /*
    Property Width
    */
    inline double Width() const; //Returns the value of Width

    /*
    Property X
    */
    inline double X() const; //Returns the value of X

    /*
    Property Y
    */
    inline double Y() const; //Returns the value of Y

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ITextObject : public QAxObject
{
public:
    ITextObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackgroundColor
    */
    inline DYMO_Label_Framework::IColor* BackgroundColor() const; //Returns the value of BackgroundColor
    inline void SetBackgroundColor(DYMO_Label_Framework::IColor* value); //Sets the value of the BackgroundColor property

    /*
    Property FitMode
    */
    inline DYMO_Label_Framework::TextFitMode FitMode() const; //Returns the value of FitMode
    inline void SetFitMode(DYMO_Label_Framework::TextFitMode value); //Sets the value of the FitMode property

    /*
    Property HorizontalAlignment
    */
    inline DYMO_Label_Framework::TextAlignment HorizontalAlignment() const; //Returns the value of HorizontalAlignment
    inline void SetHorizontalAlignment(DYMO_Label_Framework::TextAlignment value); //Sets the value of the HorizontalAlignment property

    /*
    Property IsMirrored
    */
    inline bool IsMirrored() const; //Returns the value of IsMirrored
    inline void SetIsMirrored(bool value); //Sets the value of the IsMirrored property

    /*
    Property Rotation
    */
    inline DYMO_Label_Framework::ObjectRotation Rotation() const; //Returns the value of Rotation
    inline void SetRotation(DYMO_Label_Framework::ObjectRotation value); //Sets the value of the Rotation property

    /*
    Property Text
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property TextColor
    */
    inline DYMO_Label_Framework::IColor* TextColor() const; //Returns the value of TextColor
    inline void SetTextColor(DYMO_Label_Framework::IColor* value); //Sets the value of the TextColor property

    /*
    Property TextMarkup
    */
    inline QString TextMarkup() const; //Returns the value of TextMarkup
    inline void SetTextMarkup(const QString& value); //Sets the value of the TextMarkup property

    /*
    Property VerticalAlignment
    */
    inline DYMO_Label_Framework::TextVerticalAlignment VerticalAlignment() const; //Returns the value of VerticalAlignment
    inline void SetVerticalAlignment(DYMO_Label_Framework::TextVerticalAlignment value); //Sets the value of the VerticalAlignment property

    /*
    Property Verticalized
    */
    inline bool Verticalized() const; //Returns the value of Verticalized
    inline void SetVerticalized(bool value); //Sets the value of the Verticalized property

    /*
    Method SetLineFont
    */
    inline void SetLineFont(int lineNo, DYMO_Label_Framework::IFontInfo* FontInfo);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IPrinters : public QAxObject
{
public:
    IPrinters(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method GetPrinterByName
    */
    inline DYMO_Label_Framework::IPrinter* GetPrinterByName(const QString& printerName);

    /*
    Method Item
    */
    inline DYMO_Label_Framework::IPrinter* Item(int index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IPrinter : public QAxObject
{
public:
    IPrinter(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property IsConnected
    */
    inline bool IsConnected() const; //Returns the value of IsConnected

    /*
    Property IsLocal
    */
    inline bool IsLocal() const; //Returns the value of IsLocal

    /*
    Property ModelName
    */
    inline QString ModelName() const; //Returns the value of ModelName

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property PrinterType
    */
    inline QString PrinterType() const; //Returns the value of PrinterType

    /*
    Method CreatePrintJob
    */
    inline DYMO_Label_Framework::IPrintJob* CreatePrintJob(DYMO_Label_Framework::IPrintParams* printParams);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IPrintJob : public QAxObject
{
public:
    IPrintJob(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method AddLabel
    */
    inline void AddLabel(DYMO_Label_Framework::ILabel* label);

    /*
    Method Print
    */
    inline void Print();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ICircularTextObject : public QAxObject
{
public:
    ICircularTextObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackgroundColor
    */
    inline DYMO_Label_Framework::IColor* BackgroundColor() const; //Returns the value of BackgroundColor
    inline void SetBackgroundColor(DYMO_Label_Framework::IColor* value); //Sets the value of the BackgroundColor property

    /*
    Property DisplayMode
    */
    inline DYMO_Label_Framework::CurcularTextDisplayMode DisplayMode() const; //Returns the value of DisplayMode
    inline void SetDisplayMode(DYMO_Label_Framework::CurcularTextDisplayMode value); //Sets the value of the DisplayMode property

    /*
    Property Font
    */
    inline DYMO_Label_Framework::IFontInfo* Font() const; //Returns the value of Font
    inline void SetFont(DYMO_Label_Framework::IFontInfo* value); //Sets the value of the Font property

    /*
    Property Rotation
    */
    inline DYMO_Label_Framework::ObjectRotation Rotation() const; //Returns the value of Rotation
    inline void SetRotation(DYMO_Label_Framework::ObjectRotation value); //Sets the value of the Rotation property

    /*
    Property StartAngle
    */
    inline double StartAngle() const; //Returns the value of StartAngle
    inline void SetStartAngle(double value); //Sets the value of the StartAngle property

    /*
    Property Text
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property TextAlignment
    */
    inline DYMO_Label_Framework::CircleTextAlignment TextAlignment() const; //Returns the value of TextAlignment
    inline void SetTextAlignment(DYMO_Label_Framework::CircleTextAlignment value); //Sets the value of the TextAlignment property

    /*
    Property TextColor
    */
    inline DYMO_Label_Framework::IColor* TextColor() const; //Returns the value of TextColor
    inline void SetTextColor(DYMO_Label_Framework::IColor* value); //Sets the value of the TextColor property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IPrintParams : public QAxObject
{
public:
    IPrintParams(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Copies
    */
    inline int Copies() const; //Returns the value of Copies
    inline void SetCopies(int value); //Sets the value of the Copies property

    /*
    Property FlowDirection
    */
    inline DYMO_Label_Framework::FlowDirection FlowDirection() const; //Returns the value of FlowDirection
    inline void SetFlowDirection(DYMO_Label_Framework::FlowDirection value); //Sets the value of the FlowDirection property

    /*
    Property JobTitle
    */
    inline QString JobTitle() const; //Returns the value of JobTitle
    inline void SetJobTitle(const QString& value); //Sets the value of the JobTitle property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ILabelWriterPrintParams : public QAxObject
{
public:
    ILabelWriterPrintParams(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property PrintQuality
    */
    inline DYMO_Label_Framework::LabelWriterPrintQuality PrintQuality() const; //Returns the value of PrintQuality
    inline void SetPrintQuality(DYMO_Label_Framework::LabelWriterPrintQuality value); //Sets the value of the PrintQuality property

    /*
    Property RollSelection
    */
    inline DYMO_Label_Framework::RollSelection RollSelection() const; //Returns the value of RollSelection
    inline void SetRollSelection(DYMO_Label_Framework::RollSelection value); //Sets the value of the RollSelection property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ITapePrintParams : public QAxObject
{
public:
    ITapePrintParams(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property TapeAlignment
    */
    inline DYMO_Label_Framework::TapeAlignment TapeAlignment() const; //Returns the value of TapeAlignment
    inline void SetTapeAlignment(DYMO_Label_Framework::TapeAlignment value); //Sets the value of the TapeAlignment property

    /*
    Property TapeCutMode
    */
    inline DYMO_Label_Framework::TapeCutMode TapeCutMode() const; //Returns the value of TapeCutMode
    inline void SetTapeCutMode(DYMO_Label_Framework::TapeCutMode value); //Sets the value of the TapeCutMode property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ILabelRenderParams : public QAxObject
{
public:
    ILabelRenderParams(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property FlowDirection
    */
    inline DYMO_Label_Framework::FlowDirection FlowDirection() const; //Returns the value of FlowDirection
    inline void SetFlowDirection(DYMO_Label_Framework::FlowDirection value); //Sets the value of the FlowDirection property

    /*
    Property LabelColor
    */
    inline DYMO_Label_Framework::IColor* LabelColor() const; //Returns the value of LabelColor
    inline void SetLabelColor(DYMO_Label_Framework::IColor* value); //Sets the value of the LabelColor property

    /*
    Property PngUseDisplayResolution
    */
    inline bool PngUseDisplayResolution() const; //Returns the value of PngUseDisplayResolution
    inline void SetPngUseDisplayResolution(bool value); //Sets the value of the PngUseDisplayResolution property

    /*
    Property ShadowColor
    */
    inline DYMO_Label_Framework::IColor* ShadowColor() const; //Returns the value of ShadowColor
    inline void SetShadowColor(DYMO_Label_Framework::IColor* value); //Sets the value of the ShadowColor property

    /*
    Property ShadowDepth
    */
    inline double ShadowDepth() const; //Returns the value of ShadowDepth
    inline void SetShadowDepth(double value); //Sets the value of the ShadowDepth property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ILabelWriterPrinter : public QAxObject
{
public:
    ILabelWriterPrinter(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property IsTwinTurbo
    */
    inline bool IsTwinTurbo() const; //Returns the value of IsTwinTurbo

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ILabel : public QAxObject
{
public:
    ILabel(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AddressObjectCount
    */
    inline int AddressObjectCount() const; //Returns the value of AddressObjectCount

    /*
    Property LabelObjects
    */
    inline DYMO_Label_Framework::ILabelObjects* LabelObjects() const; //Returns the value of LabelObjects

    /*
    Property LabelType
    */
    inline QString LabelType() const; //Returns the value of LabelType

    /*
    Method GetObjectByName
    */
    inline DYMO_Label_Framework::ILabelObject* GetObjectByName(const QString& objectName);

    /*
    Method GetObjectNames
    */
    inline DYMO_Label_Framework::IStringList* GetObjectNames();

    /*
    Method GetObjectText
    */
    inline QString GetObjectText(const QString& objectName);

    /*
    Method Print
    */
    inline void Print(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::IPrintParams* printParams);

    /*
    Method PrintLabelSet
    */
    inline void PrintLabelSet(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::IPrintParams* printParams, const QString& labelSetXml);

    /*
    Method RenderAsPng
    */
    inline QByteArray RenderAsPng(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::ILabelRenderParams* renderParams);

    /*
    Method RenderAsPngBase64
    */
    inline QString RenderAsPngBase64(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::ILabelRenderParams* renderParams);

    /*
    Method SaveToFile
    */
    inline void SaveToFile(const QString& fileName);

    /*
    Method SaveToXml
    */
    inline QString SaveToXml();

    /*
    Method SetAddressText
    */
    inline void SetAddressText(int index, const QString& Text);

    /*
    Method SetImagePngData
    */
    inline void SetImagePngData(const QString& imageName, const QByteArray& pngData);

    /*
    Method SetImagePngDataBase64
    */
    inline void SetImagePngDataBase64(const QString& imageName, const QString& pngData);

    /*
    Method SetImageUri
    */
    inline void SetImageUri(const QString& imageName, const QString& uri);

    /*
    Method SetObjectText
    */
    inline void SetObjectText(const QString& objectName, const QString& Text);

    /*
    Method SetPostnetBarcodePosition
    */
    inline void SetPostnetBarcodePosition(int index, DYMO_Label_Framework::PostnetBarcodePosition position);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IDieCutLabel : public QAxObject
{
public:
    IDieCutLabel(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method AddObject
    */
    inline void AddObject(DYMO_Label_Framework::ILabelObject* obj, DYMO_Label_Framework::IRect* bounds);

    /*
    Method BringToFront
    */
    inline void BringToFront(DYMO_Label_Framework::ILabelObject* obj);

    /*
    Method DeleteObject
    */
    inline void DeleteObject(DYMO_Label_Framework::ILabelObject* obj);

    /*
    Method GetObjectPosition
    */
    inline DYMO_Label_Framework::IRect* GetObjectPosition(const QString& objectName);

    /*
    Method MoveObject
    */
    inline void MoveObject(DYMO_Label_Framework::ILabelObject* obj, double X, double Y);

    /*
    Method ResizeObject
    */
    inline void ResizeObject(DYMO_Label_Framework::ILabelObject* obj, double Width, double Height);

    /*
    Method SendToBack
    */
    inline void SendToBack(DYMO_Label_Framework::ILabelObject* obj);

    /*
    Method SetObjectPosition
    */
    inline void SetObjectPosition(const QString& objectName, DYMO_Label_Framework::IRect* position);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IWebProxy : public QAxObject
{
public:
    IWebProxy(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Address
    */
    inline QString Address() const; //Returns the value of Address
    inline void SetAddress(const QString& value); //Sets the value of the Address property

    /*
    Property BypassList
    */
    inline DYMO_Label_Framework::IStringList* BypassList() const; //Returns the value of BypassList
    inline void SetBypassList(DYMO_Label_Framework::IStringList* value); //Sets the value of the BypassList property

    /*
    Property BypassOnLocal
    */
    inline bool BypassOnLocal() const; //Returns the value of BypassOnLocal
    inline void SetBypassOnLocal(bool value); //Sets the value of the BypassOnLocal property

    /*
    Property Domain
    */
    inline QString Domain() const; //Returns the value of Domain
    inline void SetDomain(const QString& value); //Sets the value of the Domain property

    /*
    Property Password
    */
    inline QString Password() const; //Returns the value of Password
    inline void SetPassword(const QString& value); //Sets the value of the Password property

    /*
    Property UserName
    */
    inline QString UserName() const; //Returns the value of UserName
    inline void SetUserName(const QString& value); //Sets the value of the UserName property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IFramework : public QAxObject
{
public:
    IFramework(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property LabelWriterPrinters
    */
    inline DYMO_Label_Framework::IPrinters* LabelWriterPrinters() const; //Returns the value of LabelWriterPrinters

    /*
    Property Printers
    */
    inline DYMO_Label_Framework::IPrinters* Printers() const; //Returns the value of Printers

    /*
    Property TapePrinters
    */
    inline DYMO_Label_Framework::IPrinters* TapePrinters() const; //Returns the value of TapePrinters

    /*
    Method BlackColor
    */
    inline DYMO_Label_Framework::IColor* BlackColor();

    /*
    Method CreateColor
    */
    inline DYMO_Label_Framework::IColor* CreateColor(uint r, uint g, uint b);

    /*
    Method CreateColorArgb
    */
    inline DYMO_Label_Framework::IColor* CreateColorArgb(uint a, uint r, uint g, uint b);

    /*
    Method CreateContinuousLabel
    */
    inline DYMO_Label_Framework::IContinuousLabel* CreateContinuousLabel(const QString& labelId, DYMO_Label_Framework::PaperOrientation PaperOrientation, DYMO_Label_Framework::ContinuousLabelLengthMode lengthMode, double lableLength);

    /*
    Method CreateDieCutLabel
    */
    inline DYMO_Label_Framework::IDieCutLabel* CreateDieCutLabel(const QString& labelId, DYMO_Label_Framework::PaperOrientation PaperOrientation);

    /*
    Method CreateFont
    */
    inline DYMO_Label_Framework::IFontInfo* CreateFont(const QString& fontName, double fontSize, DYMO_Label_Framework::FontStyle FontStyle);

    /*
    Method CreateRect
    */
    inline DYMO_Label_Framework::IRect* CreateRect(double X, double Y, double Width, double Height);

    /*
    Method CreateThickness
    */
    inline DYMO_Label_Framework::IThickness* CreateThickness(double left, double top, double right, double bottom);

    /*
    Method DarkGrayColor
    */
    inline DYMO_Label_Framework::IColor* DarkGrayColor();

    /*
    Method GetPrinterByName
    */
    inline DYMO_Label_Framework::IPrinter* GetPrinterByName(const QString& printerName);

    /*
    Method GetPrintersInfo
    */
    inline QString GetPrintersInfo();

    /*
    Method GrayColor
    */
    inline DYMO_Label_Framework::IColor* GrayColor();

    /*
    Method LightGrayColor
    */
    inline DYMO_Label_Framework::IColor* LightGrayColor();

    /*
    Method OpenLabel
    */
    inline DYMO_Label_Framework::ILabel* OpenLabel(const QString& uri);

    /*
    Method OpenLabelXml
    */
    inline DYMO_Label_Framework::ILabel* OpenLabelXml(const QString& xml);

    /*
    Method PrintLabel
    */
    inline void PrintLabel(const QString& printerName, const QString& printParamsXml, const QString& labelXml, const QString& labelSetXml);

    /*
    Method RenderLabel
    */
    inline QString RenderLabel(const QString& labelXml, const QString& renderParamsXml, const QString& printerName);

    /*
    Method SetWebProxy
    */
    inline void SetWebProxy(DYMO_Label_Framework::IWebProxy* WebProxy);

    /*
    Method TransparentColor
    */
    inline DYMO_Label_Framework::IColor* TransparentColor();

    /*
    Method WhiteColor
    */
    inline DYMO_Label_Framework::IColor* WhiteColor();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IColor : public QAxObject
{
public:
    IColor(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property a
    */
    inline uint a() const; //Returns the value of a

    /*
    Property b
    */
    inline uint b() const; //Returns the value of b

    /*
    Property g
    */
    inline uint g() const; //Returns the value of g

    /*
    Property r
    */
    inline uint r() const; //Returns the value of r

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IContinuousLabelCellList : public QAxObject
{
public:
    IContinuousLabelCellList(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Add
    */
    inline void Add(DYMO_Label_Framework::IContinuousLabelCell* cell);

    /*
    Method Clear
    */
    inline void Clear();

    /*
    Method IndexOf
    */
    inline int IndexOf(DYMO_Label_Framework::IContinuousLabelCell* cell);

    /*
    Method Insert
    */
    inline void Insert(int index, DYMO_Label_Framework::IContinuousLabelCell* cell);

    /*
    Method Item
    */
    inline DYMO_Label_Framework::IContinuousLabelCell* Item(int index);

    /*
    Method Remove
    */
    inline void Remove(DYMO_Label_Framework::IContinuousLabelCell* cell);

    /*
    Method RemoveAt
    */
    inline void RemoveAt(int index);

    /*
    Method SetItem
    */
    inline void SetItem(int index, DYMO_Label_Framework::IContinuousLabelCell* rhs);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IContinuousLabelCell : public QAxObject
{
public:
    IContinuousLabelCell(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BorderColor
    */
    inline DYMO_Label_Framework::IColor* BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(DYMO_Label_Framework::IColor* value); //Sets the value of the BorderColor property

    /*
    Property BorderStyle
    */
    inline DYMO_Label_Framework::DashStyle BorderStyle() const; //Returns the value of BorderStyle
    inline void SetBorderStyle(DYMO_Label_Framework::DashStyle value); //Sets the value of the BorderStyle property

    /*
    Property BorderWidth
    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property LabelObject
    */
    inline DYMO_Label_Framework::ILabelObject* LabelObject() const; //Returns the value of LabelObject
    inline void SetLabelObject(DYMO_Label_Framework::ILabelObject* value); //Sets the value of the LabelObject property

    /*
    Property ObjectMargin
    */
    inline DYMO_Label_Framework::IThickness* ObjectMargin() const; //Returns the value of ObjectMargin
    inline void SetObjectMargin(DYMO_Label_Framework::IThickness* value); //Sets the value of the ObjectMargin property

    /*
    Property SizeMode
    */
    inline DYMO_Label_Framework::ContinuousLabelCellSizeMode SizeMode() const; //Returns the value of SizeMode

    /*
    Property Subcells
    */
    inline DYMO_Label_Framework::IContinuousLabelCellList* Subcells() const; //Returns the value of Subcells

    /*
    Property SubcellsOrientation
    */
    inline DYMO_Label_Framework::ContinuousSubcellsOrientation SubcellsOrientation() const; //Returns the value of SubcellsOrientation
    inline void SetSubcellsOrientation(DYMO_Label_Framework::ContinuousSubcellsOrientation value); //Sets the value of the SubcellsOrientation property

    /*
    Method GetFixedSize
    */
    inline double GetFixedSize();

    /*
    Method GetProportionalRatio
    */
    inline double GetProportionalRatio();

    /*
    Method SetAutoSize
    */
    inline void SetAutoSize();

    /*
    Method SetFixedSize
    */
    inline void SetFixedSize(double fixedSize);

    /*
    Method SetProportionalSize
    */
    inline void SetProportionalSize(double ratio);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IThickness : public QAxObject
{
public:
    IThickness(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property bottom
    */
    inline double bottom() const; //Returns the value of bottom

    /*
    Property left
    */
    inline double left() const; //Returns the value of left

    /*
    Property right
    */
    inline double right() const; //Returns the value of right

    /*
    Property top
    */
    inline double top() const; //Returns the value of top

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IFontInfo : public QAxObject
{
public:
    IFontInfo(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property FontStyle
    */
    inline DYMO_Label_Framework::FontStyle FontStyle() const; //Returns the value of FontStyle

    /*
    Property fontName
    */
    inline QString fontName() const; //Returns the value of fontName

    /*
    Property fontSize
    */
    inline double fontSize() const; //Returns the value of fontSize

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IShapeObject : public QAxObject
{
public:
    IShapeObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property FillColor
    */
    inline DYMO_Label_Framework::IColor* FillColor() const; //Returns the value of FillColor
    inline void SetFillColor(DYMO_Label_Framework::IColor* value); //Sets the value of the FillColor property

    /*
    Property LineWidth
    */
    inline double LineWidth() const; //Returns the value of LineWidth
    inline void SetLineWidth(double value); //Sets the value of the LineWidth property

    /*
    Property ShapeType
    */
    inline DYMO_Label_Framework::ShapeType ShapeType() const; //Returns the value of ShapeType
    inline void SetShapeType(DYMO_Label_Framework::ShapeType value); //Sets the value of the ShapeType property

    /*
    Property StrokeColor
    */
    inline DYMO_Label_Framework::IColor* StrokeColor() const; //Returns the value of StrokeColor
    inline void SetStrokeColor(DYMO_Label_Framework::IColor* value); //Sets the value of the StrokeColor property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ILabelRecordBuilder : public QAxObject
{
public:
    ILabelRecordBuilder(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method AddImage
    */
    inline void AddImage(const QString& objectName, const QString& imageUri);

    /*
    Method AddImagePngBase64
    */
    inline void AddImagePngBase64(const QString& objectName, const QString& base64Image);

    /*
    Method AddStyledText
    */
    inline void AddStyledText(const QString& objectName, DYMO_Label_Framework::IStyledText* StyledText);

    /*
    Method AddText
    */
    inline void AddText(const QString& objectName, const QString& Text);

    /*
    Method AddTextMarkup
    */
    inline void AddTextMarkup(const QString& objectName, const QString& TextMarkup);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ILabelSetBuilder : public QAxObject
{
public:
    ILabelSetBuilder(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property xml
    */
    inline QString xml() const; //Returns the value of xml

    /*
    Method AddRecord
    */
    inline DYMO_Label_Framework::ILabelRecordBuilder* AddRecord();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IStringList : public QAxObject
{
public:
    IStringList(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Item
    */
    inline QString Item(int index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ILabelObjects : public QAxObject
{
public:
    ILabelObjects(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method GetObjectByIndex
    */
    inline DYMO_Label_Framework::ILabelObject* GetObjectByIndex(int index);

    /*
    Method GetObjectByName
    */
    inline DYMO_Label_Framework::ILabelObject* GetObjectByName(const QString& objectName);

    /*
    Method Item
    */
    inline DYMO_Label_Framework::ILabelObject* Item(int index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ITapePrinter : public QAxObject
{
public:
    ITapePrinter(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property IsAutoCutSupported
    */
    inline bool IsAutoCutSupported() const; //Returns the value of IsAutoCutSupported

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IImageObject : public QAxObject
{
public:
    IImageObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BorderColor
    */
    inline DYMO_Label_Framework::IColor* BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(DYMO_Label_Framework::IColor* value); //Sets the value of the BorderColor property

    /*
    Property BorderWidth
    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property HorizontalAlignment
    */
    inline DYMO_Label_Framework::HorizontalAlignment HorizontalAlignment() const; //Returns the value of HorizontalAlignment
    inline void SetHorizontalAlignment(DYMO_Label_Framework::HorizontalAlignment value); //Sets the value of the HorizontalAlignment property

    /*
    Property ImagePngData
    */
    inline QByteArray ImagePngData() const; //Returns the value of ImagePngData
    inline void SetImagePngData(const QByteArray& value); //Sets the value of the ImagePngData property

    /*
    Property ImagePngDataBase64
    */
    inline QString ImagePngDataBase64() const; //Returns the value of ImagePngDataBase64
    inline void SetImagePngDataBase64(const QString& value); //Sets the value of the ImagePngDataBase64 property

    /*
    Property Rotation
    */
    inline DYMO_Label_Framework::ObjectRotation Rotation() const; //Returns the value of Rotation
    inline void SetRotation(DYMO_Label_Framework::ObjectRotation value); //Sets the value of the Rotation property

    /*
    Property ScaleMode
    */
    inline DYMO_Label_Framework::ImageScaleMode ScaleMode() const; //Returns the value of ScaleMode
    inline void SetScaleMode(DYMO_Label_Framework::ImageScaleMode value); //Sets the value of the ScaleMode property

    /*
    Property VerticalAlignment
    */
    inline DYMO_Label_Framework::VerticalAlignment VerticalAlignment() const; //Returns the value of VerticalAlignment
    inline void SetVerticalAlignment(DYMO_Label_Framework::VerticalAlignment value); //Sets the value of the VerticalAlignment property

    /*
    Method LoadFromFile
    */
    inline void LoadFromFile(const QString& fileName);

    /*
    Method LoadFromUri
    */
    inline void LoadFromUri(const QString& uri);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ICounterObject : public QAxObject
{
public:
    ICounterObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackgroundColor
    */
    inline DYMO_Label_Framework::IColor* BackgroundColor() const; //Returns the value of BackgroundColor
    inline void SetBackgroundColor(DYMO_Label_Framework::IColor* value); //Sets the value of the BackgroundColor property

    /*
    Property Current
    */
    inline int Current() const; //Returns the value of Current

    /*
    Property FitMode
    */
    inline DYMO_Label_Framework::TextFitMode FitMode() const; //Returns the value of FitMode
    inline void SetFitMode(DYMO_Label_Framework::TextFitMode value); //Sets the value of the FitMode property

    /*
    Property Font
    */
    inline DYMO_Label_Framework::IFontInfo* Font() const; //Returns the value of Font
    inline void SetFont(DYMO_Label_Framework::IFontInfo* value); //Sets the value of the Font property

    /*
    Property FormatWidth
    */
    inline int FormatWidth() const; //Returns the value of FormatWidth
    inline void SetFormatWidth(int value); //Sets the value of the FormatWidth property

    /*
    Property HorizontalAlignment
    */
    inline DYMO_Label_Framework::TextAlignment HorizontalAlignment() const; //Returns the value of HorizontalAlignment
    inline void SetHorizontalAlignment(DYMO_Label_Framework::TextAlignment value); //Sets the value of the HorizontalAlignment property

    /*
    Property IncludeLeadingZeros
    */
    inline bool IncludeLeadingZeros() const; //Returns the value of IncludeLeadingZeros
    inline void SetIncludeLeadingZeros(bool value); //Sets the value of the IncludeLeadingZeros property

    /*
    Property Increment
    */
    inline int Increment() const; //Returns the value of Increment
    inline void SetIncrement(int value); //Sets the value of the Increment property

    /*
    Property IsMirrored
    */
    inline bool IsMirrored() const; //Returns the value of IsMirrored
    inline void SetIsMirrored(bool value); //Sets the value of the IsMirrored property

    /*
    Property PostText
    */
    inline QString PostText() const; //Returns the value of PostText
    inline void SetPostText(const QString& value); //Sets the value of the PostText property

    /*
    Property PreText
    */
    inline QString PreText() const; //Returns the value of PreText
    inline void SetPreText(const QString& value); //Sets the value of the PreText property

    /*
    Property Rotation
    */
    inline DYMO_Label_Framework::ObjectRotation Rotation() const; //Returns the value of Rotation
    inline void SetRotation(DYMO_Label_Framework::ObjectRotation value); //Sets the value of the Rotation property

    /*
    Property Start
    */
    inline int Start() const; //Returns the value of Start
    inline void SetStart(int value); //Sets the value of the Start property

    /*
    Property Text
    */
    inline QString Text() const; //Returns the value of Text

    /*
    Property TextColor
    */
    inline DYMO_Label_Framework::IColor* TextColor() const; //Returns the value of TextColor
    inline void SetTextColor(DYMO_Label_Framework::IColor* value); //Sets the value of the TextColor property

    /*
    Property VerticalAlignment
    */
    inline DYMO_Label_Framework::TextVerticalAlignment VerticalAlignment() const; //Returns the value of VerticalAlignment
    inline void SetVerticalAlignment(DYMO_Label_Framework::TextVerticalAlignment value); //Sets the value of the VerticalAlignment property

    /*
    Property Verticalized
    */
    inline bool Verticalized() const; //Returns the value of Verticalized
    inline void SetVerticalized(bool value); //Sets the value of the Verticalized property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IContinuousLabel : public QAxObject
{
public:
    IContinuousLabel(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property RootCell
    */
    inline DYMO_Label_Framework::IContinuousLabelCell* RootCell() const; //Returns the value of RootCell

    /*
    Property lengthMode
    */
    inline DYMO_Label_Framework::ContinuousLabelLengthMode lengthMode() const; //Returns the value of lengthMode

    /*
    Method CreateCell
    */
    inline DYMO_Label_Framework::IContinuousLabelCell* CreateCell();

    /*
    Method GetFixedLength
    */
    inline double GetFixedLength();

    /*
    Method SetAutoLengthMode
    */
    inline void SetAutoLengthMode();

    /*
    Method SetFixedLengthMode
    */
    inline void SetFixedLengthMode(double fixedLength);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IStyledTextBlock : public QAxObject
{
public:
    IStyledTextBlock(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Font
    */
    inline DYMO_Label_Framework::IFontInfo* Font() const; //Returns the value of Font

    /*
    Property Text
    */
    inline QString Text() const; //Returns the value of Text

    /*
    Property TextColor
    */
    inline DYMO_Label_Framework::IColor* TextColor() const; //Returns the value of TextColor

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IStyledText : public QAxObject
{
public:
    IStyledText(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BlockCount
    */
    inline int BlockCount() const; //Returns the value of BlockCount

    /*
    Property Text
    */
    inline QString Text() const; //Returns the value of Text

    /*
    Method Item
    */
    inline DYMO_Label_Framework::IStyledTextBlock* Item(int index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IStyledTextBuilder : public QAxObject
{
public:
    IStyledTextBuilder(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method Append
    */
    inline void Append(const QString& Text, DYMO_Label_Framework::IFontInfo* Font, DYMO_Label_Framework::IColor* TextColor);

    /*
    Method AppendBlock
    */
    inline void AppendBlock(DYMO_Label_Framework::IStyledTextBlock* block);

    /*
    Method ToStyledText
    */
    inline DYMO_Label_Framework::IStyledText* ToStyledText();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT IDateTimeObject : public QAxObject
{
public:
    IDateTimeObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackgroundColor
    */
    inline DYMO_Label_Framework::IColor* BackgroundColor() const; //Returns the value of BackgroundColor
    inline void SetBackgroundColor(DYMO_Label_Framework::IColor* value); //Sets the value of the BackgroundColor property

    /*
    Property Culture
    */
    inline QString Culture() const; //Returns the value of Culture
    inline void SetCulture(const QString& value); //Sets the value of the Culture property

    /*
    Property DateFormat
    */
    inline DYMO_Label_Framework::DateFormat DateFormat() const; //Returns the value of DateFormat
    inline void SetDateFormat(DYMO_Label_Framework::DateFormat value); //Sets the value of the DateFormat property

    /*
    Property FitMode
    */
    inline DYMO_Label_Framework::TextFitMode FitMode() const; //Returns the value of FitMode
    inline void SetFitMode(DYMO_Label_Framework::TextFitMode value); //Sets the value of the FitMode property

    /*
    Property Font
    */
    inline DYMO_Label_Framework::IFontInfo* Font() const; //Returns the value of Font
    inline void SetFont(DYMO_Label_Framework::IFontInfo* value); //Sets the value of the Font property

    /*
    Property HorizontalAlignment
    */
    inline DYMO_Label_Framework::TextAlignment HorizontalAlignment() const; //Returns the value of HorizontalAlignment
    inline void SetHorizontalAlignment(DYMO_Label_Framework::TextAlignment value); //Sets the value of the HorizontalAlignment property

    /*
    Property IncludeTime
    */
    inline bool IncludeTime() const; //Returns the value of IncludeTime
    inline void SetIncludeTime(bool value); //Sets the value of the IncludeTime property

    /*
    Property IsMirrored
    */
    inline bool IsMirrored() const; //Returns the value of IsMirrored
    inline void SetIsMirrored(bool value); //Sets the value of the IsMirrored property

    /*
    Property PostText
    */
    inline QString PostText() const; //Returns the value of PostText
    inline void SetPostText(const QString& value); //Sets the value of the PostText property

    /*
    Property PreText
    */
    inline QString PreText() const; //Returns the value of PreText
    inline void SetPreText(const QString& value); //Sets the value of the PreText property

    /*
    Property Rotation
    */
    inline DYMO_Label_Framework::ObjectRotation Rotation() const; //Returns the value of Rotation
    inline void SetRotation(DYMO_Label_Framework::ObjectRotation value); //Sets the value of the Rotation property

    /*
    Property Text
    */
    inline QString Text() const; //Returns the value of Text

    /*
    Property TextColor
    */
    inline DYMO_Label_Framework::IColor* TextColor() const; //Returns the value of TextColor
    inline void SetTextColor(DYMO_Label_Framework::IColor* value); //Sets the value of the TextColor property

    /*
    Property Use24HourFormat
    */
    inline bool Use24HourFormat() const; //Returns the value of Use24HourFormat
    inline void SetUse24HourFormat(bool value); //Sets the value of the Use24HourFormat property

    /*
    Property VerticalAlignment
    */
    inline DYMO_Label_Framework::TextVerticalAlignment VerticalAlignment() const; //Returns the value of VerticalAlignment
    inline void SetVerticalAlignment(DYMO_Label_Framework::TextVerticalAlignment value); //Sets the value of the VerticalAlignment property

    /*
    Property Verticalized
    */
    inline bool Verticalized() const; //Returns the value of Verticalized
    inline void SetVerticalized(bool value); //Sets the value of the Verticalized property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _LabelObject : public QAxObject
{
public:
    _LabelObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _BarcodeObject : public QAxObject
{
public:
    _BarcodeObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _AddressObject : public QAxObject
{
public:
    _AddressObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _Rect : public QAxObject
{
public:
    _Rect(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _TextObject : public QAxObject
{
public:
    _TextObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _Printer : public QAxObject
{
public:
    _Printer(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _PrintJob : public QAxObject
{
public:
    _PrintJob(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _Printers : public QAxObject
{
public:
    _Printers(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _CircularTextObject : public QAxObject
{
public:
    _CircularTextObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _LabelWriterPrintParams : public QAxObject
{
public:
    _LabelWriterPrintParams(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _TapePrintParams : public QAxObject
{
public:
    _TapePrintParams(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _LabelRenderParams : public QAxObject
{
public:
    _LabelRenderParams(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _LabelWriterPrinter : public QAxObject
{
public:
    _LabelWriterPrinter(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _DieCutLabel : public QAxObject
{
public:
    _DieCutLabel(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _WebProxy : public QAxObject
{
public:
    _WebProxy(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _Framework : public QAxObject
{
public:
    _Framework(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _Color : public QAxObject
{
public:
    _Color(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _ContinuousLabelCellList : public QAxObject
{
public:
    _ContinuousLabelCellList(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _ContinuousLabelCell : public QAxObject
{
public:
    _ContinuousLabelCell(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _Thickness : public QAxObject
{
public:
    _Thickness(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _FontInfo : public QAxObject
{
public:
    _FontInfo(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _ShapeObject : public QAxObject
{
public:
    _ShapeObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _LabelRecordBuilder : public QAxObject
{
public:
    _LabelRecordBuilder(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _LabelSetBuilder : public QAxObject
{
public:
    _LabelSetBuilder(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _StringList : public QAxObject
{
public:
    _StringList(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _LabelObjects : public QAxObject
{
public:
    _LabelObjects(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _TapePrinter : public QAxObject
{
public:
    _TapePrinter(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _ImageObject : public QAxObject
{
public:
    _ImageObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _CounterObject : public QAxObject
{
public:
    _CounterObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _ContinuousLabel : public QAxObject
{
public:
    _ContinuousLabel(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _StyledTextBlock : public QAxObject
{
public:
    _StyledTextBlock(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _StyledTextBuilder : public QAxObject
{
public:
    _StyledTextBuilder(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _StyledText : public QAxObject
{
public:
    _StyledText(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT _DateTimeObject : public QAxObject
{
public:
    _DateTimeObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// Actual coclasses
class DYMO_LABEL_FRAMEWORK_EXPORT LabelObject : public QAxObject
{
public:
    LabelObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    LabelObject(ILabelObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectType
    */
    inline QString ObjectType() const; //Returns the value of ObjectType

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT BarcodeObject : public QAxObject
{
public:
    BarcodeObject(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{b3772b27-b1d3-4de8-95ea-60a5053a9db0}");
    }

    BarcodeObject(ILabelObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    BarcodeObject(IBarcodeObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BarcodeSize
    */
    inline DYMO_Label_Framework::BarcodeSize BarcodeSize() const; //Returns the value of BarcodeSize
    inline void SetBarcodeSize(DYMO_Label_Framework::BarcodeSize value); //Sets the value of the BarcodeSize property

    /*
    Property BarcodeText
    */
    inline QString BarcodeText() const; //Returns the value of BarcodeText
    inline void SetBarcodeText(const QString& value); //Sets the value of the BarcodeText property

    /*
    Property BarcodeType
    */
    inline DYMO_Label_Framework::BarcodeType BarcodeType() const; //Returns the value of BarcodeType
    inline void SetBarcodeType(DYMO_Label_Framework::BarcodeType value); //Sets the value of the BarcodeType property

    /*
    Property HorizontalAlignment
    */
    inline DYMO_Label_Framework::HorizontalAlignment HorizontalAlignment() const; //Returns the value of HorizontalAlignment
    inline void SetHorizontalAlignment(DYMO_Label_Framework::HorizontalAlignment value); //Sets the value of the HorizontalAlignment property

    /*
    Property LinkedObjectName
    */
    inline QString LinkedObjectName() const; //Returns the value of LinkedObjectName
    inline void SetLinkedObjectName(const QString& value); //Sets the value of the LinkedObjectName property

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectType
    */
    inline QString ObjectType() const; //Returns the value of ObjectType

    /*
    Property Rotation
    */
    inline DYMO_Label_Framework::ObjectRotation Rotation() const; //Returns the value of Rotation
    inline void SetRotation(DYMO_Label_Framework::ObjectRotation value); //Sets the value of the Rotation property

    /*
    Property TextFont
    */
    inline DYMO_Label_Framework::IFontInfo* TextFont() const; //Returns the value of TextFont
    inline void SetTextFont(DYMO_Label_Framework::IFontInfo* value); //Sets the value of the TextFont property

    /*
    Property TextPosition
    */
    inline DYMO_Label_Framework::BarcodeTextPosition TextPosition() const; //Returns the value of TextPosition
    inline void SetTextPosition(DYMO_Label_Framework::BarcodeTextPosition value); //Sets the value of the TextPosition property

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method Validate
    */
    inline BarcodeError Validate();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT AddressObject : public QAxObject
{
public:
    AddressObject(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{925fd156-de6b-470e-bb7b-01b8cf1cb285}");
    }

    AddressObject(ILabelObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    AddressObject(IAddressObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BackgroundColor
    */
    inline DYMO_Label_Framework::IColor* BackgroundColor() const; //Returns the value of BackgroundColor
    inline void SetBackgroundColor(DYMO_Label_Framework::IColor* value); //Sets the value of the BackgroundColor property

    /*
    Property BarcodePosition
    */
    inline DYMO_Label_Framework::PostnetBarcodePosition BarcodePosition() const; //Returns the value of BarcodePosition
    inline void SetBarcodePosition(DYMO_Label_Framework::PostnetBarcodePosition value); //Sets the value of the BarcodePosition property

    /*
    Property FitMode
    */
    inline DYMO_Label_Framework::TextFitMode FitMode() const; //Returns the value of FitMode
    inline void SetFitMode(DYMO_Label_Framework::TextFitMode value); //Sets the value of the FitMode property

    /*
    Property HorizontalAlignment
    */
    inline DYMO_Label_Framework::TextAlignment HorizontalAlignment() const; //Returns the value of HorizontalAlignment
    inline void SetHorizontalAlignment(DYMO_Label_Framework::TextAlignment value); //Sets the value of the HorizontalAlignment property

    /*
    Property IsMirrored
    */
    inline bool IsMirrored() const; //Returns the value of IsMirrored
    inline void SetIsMirrored(bool value); //Sets the value of the IsMirrored property

    /*
    Property LineCount
    */
    inline int LineCount() const; //Returns the value of LineCount

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectType
    */
    inline QString ObjectType() const; //Returns the value of ObjectType

    /*
    Property Rotation
    */
    inline DYMO_Label_Framework::ObjectRotation Rotation() const; //Returns the value of Rotation
    inline void SetRotation(DYMO_Label_Framework::ObjectRotation value); //Sets the value of the Rotation property

    /*
    Property Text
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property TextColor
    */
    inline DYMO_Label_Framework::IColor* TextColor() const; //Returns the value of TextColor
    inline void SetTextColor(DYMO_Label_Framework::IColor* value); //Sets the value of the TextColor property

    /*
    Property TextMarkup
    */
    inline QString TextMarkup() const; //Returns the value of TextMarkup
    inline void SetTextMarkup(const QString& value); //Sets the value of the TextMarkup property

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Property VerticalAlignment
    */
    inline DYMO_Label_Framework::TextVerticalAlignment VerticalAlignment() const; //Returns the value of VerticalAlignment
    inline void SetVerticalAlignment(DYMO_Label_Framework::TextVerticalAlignment value); //Sets the value of the VerticalAlignment property

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method SetLineFont
    */
    inline void SetLineFont(int lineNo, DYMO_Label_Framework::IFontInfo* FontInfo);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT Rect : public QAxObject
{
public:
    Rect(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    Rect(IRect *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Height
    */
    inline double Height() const; //Returns the value of Height

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Property Width
    */
    inline double Width() const; //Returns the value of Width

    /*
    Property X
    */
    inline double X() const; //Returns the value of X

    /*
    Property Y
    */
    inline double Y() const; //Returns the value of Y

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT TextObject : public QAxObject
{
public:
    TextObject(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{fccaf071-cbac-4238-8e2d-4a4ab2ec8b48}");
    }

    TextObject(ILabelObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TextObject(ITextObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BackgroundColor
    */
    inline DYMO_Label_Framework::IColor* BackgroundColor() const; //Returns the value of BackgroundColor
    inline void SetBackgroundColor(DYMO_Label_Framework::IColor* value); //Sets the value of the BackgroundColor property

    /*
    Property FitMode
    */
    inline DYMO_Label_Framework::TextFitMode FitMode() const; //Returns the value of FitMode
    inline void SetFitMode(DYMO_Label_Framework::TextFitMode value); //Sets the value of the FitMode property

    /*
    Property HorizontalAlignment
    */
    inline DYMO_Label_Framework::TextAlignment HorizontalAlignment() const; //Returns the value of HorizontalAlignment
    inline void SetHorizontalAlignment(DYMO_Label_Framework::TextAlignment value); //Sets the value of the HorizontalAlignment property

    /*
    Property IsMirrored
    */
    inline bool IsMirrored() const; //Returns the value of IsMirrored
    inline void SetIsMirrored(bool value); //Sets the value of the IsMirrored property

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectType
    */
    inline QString ObjectType() const; //Returns the value of ObjectType

    /*
    Property Rotation
    */
    inline DYMO_Label_Framework::ObjectRotation Rotation() const; //Returns the value of Rotation
    inline void SetRotation(DYMO_Label_Framework::ObjectRotation value); //Sets the value of the Rotation property

    /*
    Property Text
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property TextColor
    */
    inline DYMO_Label_Framework::IColor* TextColor() const; //Returns the value of TextColor
    inline void SetTextColor(DYMO_Label_Framework::IColor* value); //Sets the value of the TextColor property

    /*
    Property TextMarkup
    */
    inline QString TextMarkup() const; //Returns the value of TextMarkup
    inline void SetTextMarkup(const QString& value); //Sets the value of the TextMarkup property

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Property VerticalAlignment
    */
    inline DYMO_Label_Framework::TextVerticalAlignment VerticalAlignment() const; //Returns the value of VerticalAlignment
    inline void SetVerticalAlignment(DYMO_Label_Framework::TextVerticalAlignment value); //Sets the value of the VerticalAlignment property

    /*
    Property Verticalized
    */
    inline bool Verticalized() const; //Returns the value of Verticalized
    inline void SetVerticalized(bool value); //Sets the value of the Verticalized property

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method SetLineFont
    */
    inline void SetLineFont(int lineNo, DYMO_Label_Framework::IFontInfo* FontInfo);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT Printer : public QAxObject
{
public:
    Printer(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    Printer(IPrinter *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property IsConnected
    */
    inline bool IsConnected() const; //Returns the value of IsConnected

    /*
    Property IsLocal
    */
    inline bool IsLocal() const; //Returns the value of IsLocal

    /*
    Property ModelName
    */
    inline QString ModelName() const; //Returns the value of ModelName

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property PrinterType
    */
    inline QString PrinterType() const; //Returns the value of PrinterType

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method CreatePrintJob
    */
    inline DYMO_Label_Framework::IPrintJob* CreatePrintJob(DYMO_Label_Framework::IPrintParams* printParams);

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT PrintJob : public QAxObject
{
public:
    PrintJob(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    PrintJob(IPrintJob *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method AddLabel
    */
    inline void AddLabel(DYMO_Label_Framework::ILabel* label);

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method Print
    */
    inline void Print();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT Printers : public QAxObject
{
public:
    Printers(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{ffee7d3a-7377-4dcb-ae81-258441f2eb37}");
    }

    Printers(IPrinters *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    Printers(IEnumerable *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetEnumerator
    */
    inline stdole::IEnumVARIANT* GetEnumerator();

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetPrinterByName
    */
    inline DYMO_Label_Framework::IPrinter* GetPrinterByName(const QString& printerName);

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method Item
    */
    inline DYMO_Label_Framework::IPrinter* Item(int index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT CircularTextObject : public QAxObject
{
public:
    CircularTextObject(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{b1ecc3c9-0cf5-4a73-af2b-ee2e4d3ffc3f}");
    }

    CircularTextObject(ILabelObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    CircularTextObject(ICircularTextObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BackgroundColor
    */
    inline DYMO_Label_Framework::IColor* BackgroundColor() const; //Returns the value of BackgroundColor
    inline void SetBackgroundColor(DYMO_Label_Framework::IColor* value); //Sets the value of the BackgroundColor property

    /*
    Property DisplayMode
    */
    inline DYMO_Label_Framework::CurcularTextDisplayMode DisplayMode() const; //Returns the value of DisplayMode
    inline void SetDisplayMode(DYMO_Label_Framework::CurcularTextDisplayMode value); //Sets the value of the DisplayMode property

    /*
    Property Font
    */
    inline DYMO_Label_Framework::IFontInfo* Font() const; //Returns the value of Font
    inline void SetFont(DYMO_Label_Framework::IFontInfo* value); //Sets the value of the Font property

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectType
    */
    inline QString ObjectType() const; //Returns the value of ObjectType

    /*
    Property Rotation
    */
    inline DYMO_Label_Framework::ObjectRotation Rotation() const; //Returns the value of Rotation
    inline void SetRotation(DYMO_Label_Framework::ObjectRotation value); //Sets the value of the Rotation property

    /*
    Property StartAngle
    */
    inline double StartAngle() const; //Returns the value of StartAngle
    inline void SetStartAngle(double value); //Sets the value of the StartAngle property

    /*
    Property Text
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property TextAlignment
    */
    inline DYMO_Label_Framework::CircleTextAlignment TextAlignment() const; //Returns the value of TextAlignment
    inline void SetTextAlignment(DYMO_Label_Framework::CircleTextAlignment value); //Sets the value of the TextAlignment property

    /*
    Property TextColor
    */
    inline DYMO_Label_Framework::IColor* TextColor() const; //Returns the value of TextColor
    inline void SetTextColor(DYMO_Label_Framework::IColor* value); //Sets the value of the TextColor property

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT LabelWriterPrintParams : public QAxObject
{
public:
    LabelWriterPrintParams(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{5236988d-d5a4-4a43-8a9f-3e8977fe0ebd}");
    }

    LabelWriterPrintParams(ILabelWriterPrintParams *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LabelWriterPrintParams(IPrintParams *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Copies
    */
    inline int Copies() const; //Returns the value of Copies
    inline void SetCopies(int value); //Sets the value of the Copies property

    /*
    Property FlowDirection
    */
    inline DYMO_Label_Framework::FlowDirection FlowDirection() const; //Returns the value of FlowDirection
    inline void SetFlowDirection(DYMO_Label_Framework::FlowDirection value); //Sets the value of the FlowDirection property

    /*
    Property JobTitle
    */
    inline QString JobTitle() const; //Returns the value of JobTitle
    inline void SetJobTitle(const QString& value); //Sets the value of the JobTitle property

    /*
    Property PrintQuality
    */
    inline DYMO_Label_Framework::LabelWriterPrintQuality PrintQuality() const; //Returns the value of PrintQuality
    inline void SetPrintQuality(DYMO_Label_Framework::LabelWriterPrintQuality value); //Sets the value of the PrintQuality property

    /*
    Property RollSelection
    */
    inline DYMO_Label_Framework::RollSelection RollSelection() const; //Returns the value of RollSelection
    inline void SetRollSelection(DYMO_Label_Framework::RollSelection value); //Sets the value of the RollSelection property

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT TapePrintParams : public QAxObject
{
public:
    TapePrintParams(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{723b0a9d-adc1-405f-a18a-419dfcfeffff}");
    }

    TapePrintParams(ITapePrintParams *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TapePrintParams(IPrintParams *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Copies
    */
    inline int Copies() const; //Returns the value of Copies
    inline void SetCopies(int value); //Sets the value of the Copies property

    /*
    Property FlowDirection
    */
    inline DYMO_Label_Framework::FlowDirection FlowDirection() const; //Returns the value of FlowDirection
    inline void SetFlowDirection(DYMO_Label_Framework::FlowDirection value); //Sets the value of the FlowDirection property

    /*
    Property JobTitle
    */
    inline QString JobTitle() const; //Returns the value of JobTitle
    inline void SetJobTitle(const QString& value); //Sets the value of the JobTitle property

    /*
    Property TapeAlignment
    */
    inline DYMO_Label_Framework::TapeAlignment TapeAlignment() const; //Returns the value of TapeAlignment
    inline void SetTapeAlignment(DYMO_Label_Framework::TapeAlignment value); //Sets the value of the TapeAlignment property

    /*
    Property TapeCutMode
    */
    inline DYMO_Label_Framework::TapeCutMode TapeCutMode() const; //Returns the value of TapeCutMode
    inline void SetTapeCutMode(DYMO_Label_Framework::TapeCutMode value); //Sets the value of the TapeCutMode property

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT LabelRenderParams : public QAxObject
{
public:
    LabelRenderParams(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{6ae93fae-c9d3-4021-aea7-9d5792002a47}");
    }

    LabelRenderParams(ILabelRenderParams *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property FlowDirection
    */
    inline DYMO_Label_Framework::FlowDirection FlowDirection() const; //Returns the value of FlowDirection
    inline void SetFlowDirection(DYMO_Label_Framework::FlowDirection value); //Sets the value of the FlowDirection property

    /*
    Property LabelColor
    */
    inline DYMO_Label_Framework::IColor* LabelColor() const; //Returns the value of LabelColor
    inline void SetLabelColor(DYMO_Label_Framework::IColor* value); //Sets the value of the LabelColor property

    /*
    Property PngUseDisplayResolution
    */
    inline bool PngUseDisplayResolution() const; //Returns the value of PngUseDisplayResolution
    inline void SetPngUseDisplayResolution(bool value); //Sets the value of the PngUseDisplayResolution property

    /*
    Property ShadowColor
    */
    inline DYMO_Label_Framework::IColor* ShadowColor() const; //Returns the value of ShadowColor
    inline void SetShadowColor(DYMO_Label_Framework::IColor* value); //Sets the value of the ShadowColor property

    /*
    Property ShadowDepth
    */
    inline double ShadowDepth() const; //Returns the value of ShadowDepth
    inline void SetShadowDepth(double value); //Sets the value of the ShadowDepth property

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT LabelWriterPrinter : public QAxObject
{
public:
    LabelWriterPrinter(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    LabelWriterPrinter(IPrinter *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LabelWriterPrinter(ILabelWriterPrinter *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property IsConnected
    */
    inline bool IsConnected() const; //Returns the value of IsConnected

    /*
    Property IsLocal
    */
    inline bool IsLocal() const; //Returns the value of IsLocal

    /*
    Property IsTwinTurbo
    */
    inline bool IsTwinTurbo() const; //Returns the value of IsTwinTurbo

    /*
    Property ModelName
    */
    inline QString ModelName() const; //Returns the value of ModelName

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property PrinterType
    */
    inline QString PrinterType() const; //Returns the value of PrinterType

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method CreatePrintJob
    */
    inline DYMO_Label_Framework::IPrintJob* CreatePrintJob(DYMO_Label_Framework::IPrintParams* printParams);

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT DieCutLabel : public QAxObject
{
public:
    DieCutLabel(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    DieCutLabel(ILabel *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    DieCutLabel(IDieCutLabel *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AddressObjectCount
    */
    inline int AddressObjectCount() const; //Returns the value of AddressObjectCount

    /*
    Property LabelObjects
    */
    inline DYMO_Label_Framework::ILabelObjects* LabelObjects() const; //Returns the value of LabelObjects

    /*
    Property LabelType
    */
    inline QString LabelType() const; //Returns the value of LabelType

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method AddObject
    */
    inline void AddObject(DYMO_Label_Framework::ILabelObject* obj, DYMO_Label_Framework::IRect* bounds);

    /*
    Method BringToFront
    */
    inline void BringToFront(DYMO_Label_Framework::ILabelObject* obj);

    /*
    Method DeleteObject
    */
    inline void DeleteObject(DYMO_Label_Framework::ILabelObject* obj);

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetObjectByName
    */
    inline DYMO_Label_Framework::ILabelObject* GetObjectByName(const QString& objectName);

    /*
    Method GetObjectNames
    */
    inline DYMO_Label_Framework::IStringList* GetObjectNames();

    /*
    Method GetObjectPosition
    */
    inline DYMO_Label_Framework::IRect* GetObjectPosition(const QString& objectName);

    /*
    Method GetObjectText
    */
    inline QString GetObjectText(const QString& objectName);

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method MoveObject
    */
    inline void MoveObject(DYMO_Label_Framework::ILabelObject* obj, double X, double Y);

    /*
    Method Print
    */
    inline void Print(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::IPrintParams* printParams);

    /*
    Method PrintLabelSet
    */
    inline void PrintLabelSet(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::IPrintParams* printParams, const QString& labelSetXml);

    /*
    Method RenderAsPng
    */
    inline QByteArray RenderAsPng(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::ILabelRenderParams* renderParams);

    /*
    Method RenderAsPngBase64
    */
    inline QString RenderAsPngBase64(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::ILabelRenderParams* renderParams);

    /*
    Method ResizeObject
    */
    inline void ResizeObject(DYMO_Label_Framework::ILabelObject* obj, double Width, double Height);

    /*
    Method SaveToFile
    */
    inline void SaveToFile(const QString& fileName);

    /*
    Method SaveToXml
    */
    inline QString SaveToXml();

    /*
    Method SendToBack
    */
    inline void SendToBack(DYMO_Label_Framework::ILabelObject* obj);

    /*
    Method SetAddressText
    */
    inline void SetAddressText(int index, const QString& Text);

    /*
    Method SetImagePngData
    */
    inline void SetImagePngData(const QString& imageName, const QByteArray& pngData);

    /*
    Method SetImagePngDataBase64
    */
    inline void SetImagePngDataBase64(const QString& imageName, const QString& pngData);

    /*
    Method SetImageUri
    */
    inline void SetImageUri(const QString& imageName, const QString& uri);

    /*
    Method SetObjectPosition
    */
    inline void SetObjectPosition(const QString& objectName, DYMO_Label_Framework::IRect* position);

    /*
    Method SetObjectText
    */
    inline void SetObjectText(const QString& objectName, const QString& Text);

    /*
    Method SetPostnetBarcodePosition
    */
    inline void SetPostnetBarcodePosition(int index, DYMO_Label_Framework::PostnetBarcodePosition position);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT WebProxy : public QAxObject
{
public:
    WebProxy(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{36d1e783-4a74-42e7-9ad8-9e67b916f239}");
    }

    WebProxy(IWebProxy *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Address
    */
    inline QString Address() const; //Returns the value of Address
    inline void SetAddress(const QString& value); //Sets the value of the Address property

    /*
    Property BypassList
    */
    inline DYMO_Label_Framework::IStringList* BypassList() const; //Returns the value of BypassList
    inline void SetBypassList(DYMO_Label_Framework::IStringList* value); //Sets the value of the BypassList property

    /*
    Property BypassOnLocal
    */
    inline bool BypassOnLocal() const; //Returns the value of BypassOnLocal
    inline void SetBypassOnLocal(bool value); //Sets the value of the BypassOnLocal property

    /*
    Property Domain
    */
    inline QString Domain() const; //Returns the value of Domain
    inline void SetDomain(const QString& value); //Sets the value of the Domain property

    /*
    Property Password
    */
    inline QString Password() const; //Returns the value of Password
    inline void SetPassword(const QString& value); //Sets the value of the Password property

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Property UserName
    */
    inline QString UserName() const; //Returns the value of UserName
    inline void SetUserName(const QString& value); //Sets the value of the UserName property

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT Framework : public QAxObject
{
public:
    Framework(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{6b940161-91a3-4dbe-ad3e-ec098d0a88d5}");
    }

    Framework(IFramework *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property LabelWriterPrinters
    */
    inline DYMO_Label_Framework::IPrinters* LabelWriterPrinters() const; //Returns the value of LabelWriterPrinters

    /*
    Property Printers
    */
    inline DYMO_Label_Framework::IPrinters* Printers() const; //Returns the value of Printers

    /*
    Property TapePrinters
    */
    inline DYMO_Label_Framework::IPrinters* TapePrinters() const; //Returns the value of TapePrinters

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method BlackColor
    */
    inline DYMO_Label_Framework::IColor* BlackColor();

    /*
    Method CreateColor
    */
    inline DYMO_Label_Framework::IColor* CreateColor(uint r, uint g, uint b);

    /*
    Method CreateColorArgb
    */
    inline DYMO_Label_Framework::IColor* CreateColorArgb(uint a, uint r, uint g, uint b);

    /*
    Method CreateContinuousLabel
    */
    inline DYMO_Label_Framework::IContinuousLabel* CreateContinuousLabel(const QString& labelId, DYMO_Label_Framework::PaperOrientation PaperOrientation, DYMO_Label_Framework::ContinuousLabelLengthMode lengthMode, double lableLength);

    /*
    Method CreateDieCutLabel
    */
    inline DYMO_Label_Framework::IDieCutLabel* CreateDieCutLabel(const QString& labelId, DYMO_Label_Framework::PaperOrientation PaperOrientation);

    /*
    Method CreateFont
    */
    inline DYMO_Label_Framework::IFontInfo* CreateFont(const QString& fontName, double fontSize, DYMO_Label_Framework::FontStyle FontStyle);

    /*
    Method CreateRect
    */
    inline DYMO_Label_Framework::IRect* CreateRect(double X, double Y, double Width, double Height);

    /*
    Method CreateThickness
    */
    inline DYMO_Label_Framework::IThickness* CreateThickness(double left, double top, double right, double bottom);

    /*
    Method DarkGrayColor
    */
    inline DYMO_Label_Framework::IColor* DarkGrayColor();

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetPrinterByName
    */
    inline DYMO_Label_Framework::IPrinter* GetPrinterByName(const QString& printerName);

    /*
    Method GetPrintersInfo
    */
    inline QString GetPrintersInfo();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method GrayColor
    */
    inline DYMO_Label_Framework::IColor* GrayColor();

    /*
    Method LightGrayColor
    */
    inline DYMO_Label_Framework::IColor* LightGrayColor();

    /*
    Method OpenLabel
    */
    inline DYMO_Label_Framework::ILabel* OpenLabel(const QString& uri);

    /*
    Method OpenLabelXml
    */
    inline DYMO_Label_Framework::ILabel* OpenLabelXml(const QString& xml);

    /*
    Method PrintLabel
    */
    inline void PrintLabel(const QString& printerName, const QString& printParamsXml, const QString& labelXml, const QString& labelSetXml);

    /*
    Method RenderLabel
    */
    inline QString RenderLabel(const QString& labelXml, const QString& renderParamsXml, const QString& printerName);

    /*
    Method SetWebProxy
    */
    inline void SetWebProxy(DYMO_Label_Framework::IWebProxy* WebProxy);

    /*
    Method TransparentColor
    */
    inline DYMO_Label_Framework::IColor* TransparentColor();

    /*
    Method WhiteColor
    */
    inline DYMO_Label_Framework::IColor* WhiteColor();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT Color : public QAxObject
{
public:
    Color(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    Color(IColor *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Property a
    */
    inline uint a() const; //Returns the value of a

    /*
    Property b
    */
    inline uint b() const; //Returns the value of b

    /*
    Property g
    */
    inline uint g() const; //Returns the value of g

    /*
    Property r
    */
    inline uint r() const; //Returns the value of r

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ContinuousLabelCellList : public QAxObject
{
public:
    ContinuousLabelCellList(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    ContinuousLabelCellList(IContinuousLabelCellList *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ContinuousLabelCellList(IEnumerable *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Add
    */
    inline void Add(DYMO_Label_Framework::IContinuousLabelCell* cell);

    /*
    Method Clear
    */
    inline void Clear();

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetEnumerator
    */
    inline stdole::IEnumVARIANT* GetEnumerator();

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method IndexOf
    */
    inline int IndexOf(DYMO_Label_Framework::IContinuousLabelCell* cell);

    /*
    Method Insert
    */
    inline void Insert(int index, DYMO_Label_Framework::IContinuousLabelCell* cell);

    /*
    Method Item
    */
    inline DYMO_Label_Framework::IContinuousLabelCell* Item(int index);

    /*
    Method Remove
    */
    inline void Remove(DYMO_Label_Framework::IContinuousLabelCell* cell);

    /*
    Method RemoveAt
    */
    inline void RemoveAt(int index);

    /*
    Method SetItem
    */
    inline void SetItem(int index, DYMO_Label_Framework::IContinuousLabelCell* rhs);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ContinuousLabelCell : public QAxObject
{
public:
    ContinuousLabelCell(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    ContinuousLabelCell(IContinuousLabelCell *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BorderColor
    */
    inline DYMO_Label_Framework::IColor* BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(DYMO_Label_Framework::IColor* value); //Sets the value of the BorderColor property

    /*
    Property BorderStyle
    */
    inline DYMO_Label_Framework::DashStyle BorderStyle() const; //Returns the value of BorderStyle
    inline void SetBorderStyle(DYMO_Label_Framework::DashStyle value); //Sets the value of the BorderStyle property

    /*
    Property BorderWidth
    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property LabelObject
    */
    inline DYMO_Label_Framework::ILabelObject* LabelObject() const; //Returns the value of LabelObject
    inline void SetLabelObject(DYMO_Label_Framework::ILabelObject* value); //Sets the value of the LabelObject property

    /*
    Property ObjectMargin
    */
    inline DYMO_Label_Framework::IThickness* ObjectMargin() const; //Returns the value of ObjectMargin
    inline void SetObjectMargin(DYMO_Label_Framework::IThickness* value); //Sets the value of the ObjectMargin property

    /*
    Property SizeMode
    */
    inline DYMO_Label_Framework::ContinuousLabelCellSizeMode SizeMode() const; //Returns the value of SizeMode

    /*
    Property Subcells
    */
    inline DYMO_Label_Framework::IContinuousLabelCellList* Subcells() const; //Returns the value of Subcells

    /*
    Property SubcellsOrientation
    */
    inline DYMO_Label_Framework::ContinuousSubcellsOrientation SubcellsOrientation() const; //Returns the value of SubcellsOrientation
    inline void SetSubcellsOrientation(DYMO_Label_Framework::ContinuousSubcellsOrientation value); //Sets the value of the SubcellsOrientation property

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetFixedSize
    */
    inline double GetFixedSize();

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetProportionalRatio
    */
    inline double GetProportionalRatio();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method SetAutoSize
    */
    inline void SetAutoSize();

    /*
    Method SetFixedSize
    */
    inline void SetFixedSize(double fixedSize);

    /*
    Method SetProportionalSize
    */
    inline void SetProportionalSize(double ratio);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT Thickness : public QAxObject
{
public:
    Thickness(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    Thickness(IThickness *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Property bottom
    */
    inline double bottom() const; //Returns the value of bottom

    /*
    Property left
    */
    inline double left() const; //Returns the value of left

    /*
    Property right
    */
    inline double right() const; //Returns the value of right

    /*
    Property top
    */
    inline double top() const; //Returns the value of top

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT FontInfo : public QAxObject
{
public:
    FontInfo(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    FontInfo(IFontInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property FontStyle
    */
    inline DYMO_Label_Framework::FontStyle FontStyle() const; //Returns the value of FontStyle

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Property fontName
    */
    inline QString fontName() const; //Returns the value of fontName

    /*
    Property fontSize
    */
    inline double fontSize() const; //Returns the value of fontSize

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ShapeObject : public QAxObject
{
public:
    ShapeObject(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{350c51ff-2ce0-41e1-9f3f-f217df3da8c7}");
    }

    ShapeObject(ILabelObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ShapeObject(IShapeObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property FillColor
    */
    inline DYMO_Label_Framework::IColor* FillColor() const; //Returns the value of FillColor
    inline void SetFillColor(DYMO_Label_Framework::IColor* value); //Sets the value of the FillColor property

    /*
    Property LineWidth
    */
    inline double LineWidth() const; //Returns the value of LineWidth
    inline void SetLineWidth(double value); //Sets the value of the LineWidth property

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectType
    */
    inline QString ObjectType() const; //Returns the value of ObjectType

    /*
    Property ShapeType
    */
    inline DYMO_Label_Framework::ShapeType ShapeType() const; //Returns the value of ShapeType
    inline void SetShapeType(DYMO_Label_Framework::ShapeType value); //Sets the value of the ShapeType property

    /*
    Property StrokeColor
    */
    inline DYMO_Label_Framework::IColor* StrokeColor() const; //Returns the value of StrokeColor
    inline void SetStrokeColor(DYMO_Label_Framework::IColor* value); //Sets the value of the StrokeColor property

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT LabelRecordBuilder : public QAxObject
{
public:
    LabelRecordBuilder(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    LabelRecordBuilder(ILabelRecordBuilder *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method AddImage
    */
    inline void AddImage(const QString& objectName, const QString& imageUri);

    /*
    Method AddImagePngBase64
    */
    inline void AddImagePngBase64(const QString& objectName, const QString& base64Image);

    /*
    Method AddStyledText
    */
    inline void AddStyledText(const QString& objectName, DYMO_Label_Framework::IStyledText* StyledText);

    /*
    Method AddText
    */
    inline void AddText(const QString& objectName, const QString& Text);

    /*
    Method AddTextMarkup
    */
    inline void AddTextMarkup(const QString& objectName, const QString& TextMarkup);

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT LabelSetBuilder : public QAxObject
{
public:
    LabelSetBuilder(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{e6f2f2e5-6d16-4568-8cf1-e22f8d50f783}");
    }

    LabelSetBuilder(ILabelSetBuilder *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Property xml
    */
    inline QString xml() const; //Returns the value of xml

    /*
    Method AddRecord
    */
    inline DYMO_Label_Framework::ILabelRecordBuilder* AddRecord();

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT StringList : public QAxObject
{
public:
    StringList(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    StringList(IStringList *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    StringList(IEnumerable *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetEnumerator
    */
    inline stdole::IEnumVARIANT* GetEnumerator();

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method Item
    */
    inline QString Item(int index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT LabelObjects : public QAxObject
{
public:
    LabelObjects(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    LabelObjects(ILabelObjects *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LabelObjects(IEnumerable *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetEnumerator
    */
    inline stdole::IEnumVARIANT* GetEnumerator();

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetObjectByIndex
    */
    inline DYMO_Label_Framework::ILabelObject* GetObjectByIndex(int index);

    /*
    Method GetObjectByName
    */
    inline DYMO_Label_Framework::ILabelObject* GetObjectByName(const QString& objectName);

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method Item
    */
    inline DYMO_Label_Framework::ILabelObject* Item(int index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT TapePrinter : public QAxObject
{
public:
    TapePrinter(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    TapePrinter(IPrinter *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TapePrinter(ITapePrinter *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property IsAutoCutSupported
    */
    inline bool IsAutoCutSupported() const; //Returns the value of IsAutoCutSupported

    /*
    Property IsConnected
    */
    inline bool IsConnected() const; //Returns the value of IsConnected

    /*
    Property IsLocal
    */
    inline bool IsLocal() const; //Returns the value of IsLocal

    /*
    Property ModelName
    */
    inline QString ModelName() const; //Returns the value of ModelName

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property PrinterType
    */
    inline QString PrinterType() const; //Returns the value of PrinterType

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method CreatePrintJob
    */
    inline DYMO_Label_Framework::IPrintJob* CreatePrintJob(DYMO_Label_Framework::IPrintParams* printParams);

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ImageObject : public QAxObject
{
public:
    ImageObject(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{bbdd71f2-702e-49f7-9b3f-b4709ce7281f}");
    }

    ImageObject(ILabelObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ImageObject(IImageObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BorderColor
    */
    inline DYMO_Label_Framework::IColor* BorderColor() const; //Returns the value of BorderColor
    inline void SetBorderColor(DYMO_Label_Framework::IColor* value); //Sets the value of the BorderColor property

    /*
    Property BorderWidth
    */
    inline double BorderWidth() const; //Returns the value of BorderWidth
    inline void SetBorderWidth(double value); //Sets the value of the BorderWidth property

    /*
    Property HorizontalAlignment
    */
    inline DYMO_Label_Framework::HorizontalAlignment HorizontalAlignment() const; //Returns the value of HorizontalAlignment
    inline void SetHorizontalAlignment(DYMO_Label_Framework::HorizontalAlignment value); //Sets the value of the HorizontalAlignment property

    /*
    Property ImagePngData
    */
    inline QByteArray ImagePngData() const; //Returns the value of ImagePngData
    inline void SetImagePngData(const QByteArray& value); //Sets the value of the ImagePngData property

    /*
    Property ImagePngDataBase64
    */
    inline QString ImagePngDataBase64() const; //Returns the value of ImagePngDataBase64
    inline void SetImagePngDataBase64(const QString& value); //Sets the value of the ImagePngDataBase64 property

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectType
    */
    inline QString ObjectType() const; //Returns the value of ObjectType

    /*
    Property Rotation
    */
    inline DYMO_Label_Framework::ObjectRotation Rotation() const; //Returns the value of Rotation
    inline void SetRotation(DYMO_Label_Framework::ObjectRotation value); //Sets the value of the Rotation property

    /*
    Property ScaleMode
    */
    inline DYMO_Label_Framework::ImageScaleMode ScaleMode() const; //Returns the value of ScaleMode
    inline void SetScaleMode(DYMO_Label_Framework::ImageScaleMode value); //Sets the value of the ScaleMode property

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Property VerticalAlignment
    */
    inline DYMO_Label_Framework::VerticalAlignment VerticalAlignment() const; //Returns the value of VerticalAlignment
    inline void SetVerticalAlignment(DYMO_Label_Framework::VerticalAlignment value); //Sets the value of the VerticalAlignment property

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method LoadFromFile
    */
    inline void LoadFromFile(const QString& fileName);

    /*
    Method LoadFromUri
    */
    inline void LoadFromUri(const QString& uri);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT CounterObject : public QAxObject
{
public:
    CounterObject(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{7b556606-7719-48da-b43b-9af6905ace72}");
    }

    CounterObject(ILabelObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    CounterObject(ICounterObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BackgroundColor
    */
    inline DYMO_Label_Framework::IColor* BackgroundColor() const; //Returns the value of BackgroundColor
    inline void SetBackgroundColor(DYMO_Label_Framework::IColor* value); //Sets the value of the BackgroundColor property

    /*
    Property Current
    */
    inline int Current() const; //Returns the value of Current

    /*
    Property FitMode
    */
    inline DYMO_Label_Framework::TextFitMode FitMode() const; //Returns the value of FitMode
    inline void SetFitMode(DYMO_Label_Framework::TextFitMode value); //Sets the value of the FitMode property

    /*
    Property Font
    */
    inline DYMO_Label_Framework::IFontInfo* Font() const; //Returns the value of Font
    inline void SetFont(DYMO_Label_Framework::IFontInfo* value); //Sets the value of the Font property

    /*
    Property FormatWidth
    */
    inline int FormatWidth() const; //Returns the value of FormatWidth
    inline void SetFormatWidth(int value); //Sets the value of the FormatWidth property

    /*
    Property HorizontalAlignment
    */
    inline DYMO_Label_Framework::TextAlignment HorizontalAlignment() const; //Returns the value of HorizontalAlignment
    inline void SetHorizontalAlignment(DYMO_Label_Framework::TextAlignment value); //Sets the value of the HorizontalAlignment property

    /*
    Property IncludeLeadingZeros
    */
    inline bool IncludeLeadingZeros() const; //Returns the value of IncludeLeadingZeros
    inline void SetIncludeLeadingZeros(bool value); //Sets the value of the IncludeLeadingZeros property

    /*
    Property Increment
    */
    inline int Increment() const; //Returns the value of Increment
    inline void SetIncrement(int value); //Sets the value of the Increment property

    /*
    Property IsMirrored
    */
    inline bool IsMirrored() const; //Returns the value of IsMirrored
    inline void SetIsMirrored(bool value); //Sets the value of the IsMirrored property

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectType
    */
    inline QString ObjectType() const; //Returns the value of ObjectType

    /*
    Property PostText
    */
    inline QString PostText() const; //Returns the value of PostText
    inline void SetPostText(const QString& value); //Sets the value of the PostText property

    /*
    Property PreText
    */
    inline QString PreText() const; //Returns the value of PreText
    inline void SetPreText(const QString& value); //Sets the value of the PreText property

    /*
    Property Rotation
    */
    inline DYMO_Label_Framework::ObjectRotation Rotation() const; //Returns the value of Rotation
    inline void SetRotation(DYMO_Label_Framework::ObjectRotation value); //Sets the value of the Rotation property

    /*
    Property Start
    */
    inline int Start() const; //Returns the value of Start
    inline void SetStart(int value); //Sets the value of the Start property

    /*
    Property Text
    */
    inline QString Text() const; //Returns the value of Text

    /*
    Property TextColor
    */
    inline DYMO_Label_Framework::IColor* TextColor() const; //Returns the value of TextColor
    inline void SetTextColor(DYMO_Label_Framework::IColor* value); //Sets the value of the TextColor property

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Property VerticalAlignment
    */
    inline DYMO_Label_Framework::TextVerticalAlignment VerticalAlignment() const; //Returns the value of VerticalAlignment
    inline void SetVerticalAlignment(DYMO_Label_Framework::TextVerticalAlignment value); //Sets the value of the VerticalAlignment property

    /*
    Property Verticalized
    */
    inline bool Verticalized() const; //Returns the value of Verticalized
    inline void SetVerticalized(bool value); //Sets the value of the Verticalized property

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT ContinuousLabel : public QAxObject
{
public:
    ContinuousLabel(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    ContinuousLabel(ILabel *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ContinuousLabel(IContinuousLabel *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AddressObjectCount
    */
    inline int AddressObjectCount() const; //Returns the value of AddressObjectCount

    /*
    Property LabelObjects
    */
    inline DYMO_Label_Framework::ILabelObjects* LabelObjects() const; //Returns the value of LabelObjects

    /*
    Property LabelType
    */
    inline QString LabelType() const; //Returns the value of LabelType

    /*
    Property RootCell
    */
    inline DYMO_Label_Framework::IContinuousLabelCell* RootCell() const; //Returns the value of RootCell

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Property lengthMode
    */
    inline DYMO_Label_Framework::ContinuousLabelLengthMode lengthMode() const; //Returns the value of lengthMode

    /*
    Method CreateCell
    */
    inline DYMO_Label_Framework::IContinuousLabelCell* CreateCell();

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetFixedLength
    */
    inline double GetFixedLength();

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetObjectByName
    */
    inline DYMO_Label_Framework::ILabelObject* GetObjectByName(const QString& objectName);

    /*
    Method GetObjectNames
    */
    inline DYMO_Label_Framework::IStringList* GetObjectNames();

    /*
    Method GetObjectText
    */
    inline QString GetObjectText(const QString& objectName);

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method Print
    */
    inline void Print(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::IPrintParams* printParams);

    /*
    Method PrintLabelSet
    */
    inline void PrintLabelSet(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::IPrintParams* printParams, const QString& labelSetXml);

    /*
    Method RenderAsPng
    */
    inline QByteArray RenderAsPng(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::ILabelRenderParams* renderParams);

    /*
    Method RenderAsPngBase64
    */
    inline QString RenderAsPngBase64(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::ILabelRenderParams* renderParams);

    /*
    Method SaveToFile
    */
    inline void SaveToFile(const QString& fileName);

    /*
    Method SaveToXml
    */
    inline QString SaveToXml();

    /*
    Method SetAddressText
    */
    inline void SetAddressText(int index, const QString& Text);

    /*
    Method SetAutoLengthMode
    */
    inline void SetAutoLengthMode();

    /*
    Method SetFixedLengthMode
    */
    inline void SetFixedLengthMode(double fixedLength);

    /*
    Method SetImagePngData
    */
    inline void SetImagePngData(const QString& imageName, const QByteArray& pngData);

    /*
    Method SetImagePngDataBase64
    */
    inline void SetImagePngDataBase64(const QString& imageName, const QString& pngData);

    /*
    Method SetImageUri
    */
    inline void SetImageUri(const QString& imageName, const QString& uri);

    /*
    Method SetObjectText
    */
    inline void SetObjectText(const QString& objectName, const QString& Text);

    /*
    Method SetPostnetBarcodePosition
    */
    inline void SetPostnetBarcodePosition(int index, DYMO_Label_Framework::PostnetBarcodePosition position);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT StyledTextBlock : public QAxObject
{
public:
    StyledTextBlock(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    StyledTextBlock(IStyledTextBlock *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Font
    */
    inline DYMO_Label_Framework::IFontInfo* Font() const; //Returns the value of Font

    /*
    Property Text
    */
    inline QString Text() const; //Returns the value of Text

    /*
    Property TextColor
    */
    inline DYMO_Label_Framework::IColor* TextColor() const; //Returns the value of TextColor

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT StyledTextBuilder : public QAxObject
{
public:
    StyledTextBuilder(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{cb22adf1-fcbb-49de-acfc-7342126d7d22}");
    }

    StyledTextBuilder(IStyledTextBuilder *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Append
    */
    inline void Append(const QString& Text, DYMO_Label_Framework::IFontInfo* Font, DYMO_Label_Framework::IColor* TextColor);

    /*
    Method AppendBlock
    */
    inline void AppendBlock(DYMO_Label_Framework::IStyledTextBlock* block);

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method ToStyledText
    */
    inline DYMO_Label_Framework::IStyledText* ToStyledText();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT StyledText : public QAxObject
{
public:
    StyledText(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    StyledText(IStyledText *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    StyledText(IEnumerable *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BlockCount
    */
    inline int BlockCount() const; //Returns the value of BlockCount

    /*
    Property Text
    */
    inline QString Text() const; //Returns the value of Text

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetEnumerator
    */
    inline stdole::IEnumVARIANT* GetEnumerator();

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method Item
    */
    inline DYMO_Label_Framework::IStyledTextBlock* Item(int index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class DYMO_LABEL_FRAMEWORK_EXPORT DateTimeObject : public QAxObject
{
public:
    DateTimeObject(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{18e110c0-3bcd-40a4-b01a-cd75af28658e}");
    }

    DateTimeObject(ILabelObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    DateTimeObject(IDateTimeObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BackgroundColor
    */
    inline DYMO_Label_Framework::IColor* BackgroundColor() const; //Returns the value of BackgroundColor
    inline void SetBackgroundColor(DYMO_Label_Framework::IColor* value); //Sets the value of the BackgroundColor property

    /*
    Property Culture
    */
    inline QString Culture() const; //Returns the value of Culture
    inline void SetCulture(const QString& value); //Sets the value of the Culture property

    /*
    Property DateFormat
    */
    inline DYMO_Label_Framework::DateFormat DateFormat() const; //Returns the value of DateFormat
    inline void SetDateFormat(DYMO_Label_Framework::DateFormat value); //Sets the value of the DateFormat property

    /*
    Property FitMode
    */
    inline DYMO_Label_Framework::TextFitMode FitMode() const; //Returns the value of FitMode
    inline void SetFitMode(DYMO_Label_Framework::TextFitMode value); //Sets the value of the FitMode property

    /*
    Property Font
    */
    inline DYMO_Label_Framework::IFontInfo* Font() const; //Returns the value of Font
    inline void SetFont(DYMO_Label_Framework::IFontInfo* value); //Sets the value of the Font property

    /*
    Property HorizontalAlignment
    */
    inline DYMO_Label_Framework::TextAlignment HorizontalAlignment() const; //Returns the value of HorizontalAlignment
    inline void SetHorizontalAlignment(DYMO_Label_Framework::TextAlignment value); //Sets the value of the HorizontalAlignment property

    /*
    Property IncludeTime
    */
    inline bool IncludeTime() const; //Returns the value of IncludeTime
    inline void SetIncludeTime(bool value); //Sets the value of the IncludeTime property

    /*
    Property IsMirrored
    */
    inline bool IsMirrored() const; //Returns the value of IsMirrored
    inline void SetIsMirrored(bool value); //Sets the value of the IsMirrored property

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectType
    */
    inline QString ObjectType() const; //Returns the value of ObjectType

    /*
    Property PostText
    */
    inline QString PostText() const; //Returns the value of PostText
    inline void SetPostText(const QString& value); //Sets the value of the PostText property

    /*
    Property PreText
    */
    inline QString PreText() const; //Returns the value of PreText
    inline void SetPreText(const QString& value); //Sets the value of the PreText property

    /*
    Property Rotation
    */
    inline DYMO_Label_Framework::ObjectRotation Rotation() const; //Returns the value of Rotation
    inline void SetRotation(DYMO_Label_Framework::ObjectRotation value); //Sets the value of the Rotation property

    /*
    Property Text
    */
    inline QString Text() const; //Returns the value of Text

    /*
    Property TextColor
    */
    inline DYMO_Label_Framework::IColor* TextColor() const; //Returns the value of TextColor
    inline void SetTextColor(DYMO_Label_Framework::IColor* value); //Sets the value of the TextColor property

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Property Use24HourFormat
    */
    inline bool Use24HourFormat() const; //Returns the value of Use24HourFormat
    inline void SetUse24HourFormat(bool value); //Sets the value of the Use24HourFormat property

    /*
    Property VerticalAlignment
    */
    inline DYMO_Label_Framework::TextVerticalAlignment VerticalAlignment() const; //Returns the value of VerticalAlignment
    inline void SetVerticalAlignment(DYMO_Label_Framework::TextVerticalAlignment value); //Sets the value of the VerticalAlignment property

    /*
    Property Verticalized
    */
    inline bool Verticalized() const; //Returns the value of Verticalized
    inline void SetVerticalized(bool value); //Sets the value of the Verticalized property

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_DYMO_LABEL_FRAMEWORK_NOINLINES
inline QString ILabelObject::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ILabelObject::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QString ILabelObject::ObjectType() const
{
    QVariant qax_result = property("ObjectType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}


inline DYMO_Label_Framework::BarcodeSize IBarcodeObject::BarcodeSize() const
{
    QVariant qax_result = property("BarcodeSize");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::BarcodeSize*)qax_result.constData();
}
inline void IBarcodeObject::SetBarcodeSize(DYMO_Label_Framework::BarcodeSize value){ setProperty("BarcodeSize", QVariant(value)); }

inline QString IBarcodeObject::BarcodeText() const
{
    QVariant qax_result = property("BarcodeText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IBarcodeObject::SetBarcodeText(const QString& value){ setProperty("BarcodeText", QVariant(value)); }

inline DYMO_Label_Framework::BarcodeType IBarcodeObject::BarcodeType() const
{
    QVariant qax_result = property("BarcodeType");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::BarcodeType*)qax_result.constData();
}
inline void IBarcodeObject::SetBarcodeType(DYMO_Label_Framework::BarcodeType value){ setProperty("BarcodeType", QVariant(value)); }

inline DYMO_Label_Framework::HorizontalAlignment IBarcodeObject::HorizontalAlignment() const
{
    QVariant qax_result = property("HorizontalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::HorizontalAlignment*)qax_result.constData();
}
inline void IBarcodeObject::SetHorizontalAlignment(DYMO_Label_Framework::HorizontalAlignment value){ setProperty("HorizontalAlignment", QVariant(value)); }

inline QString IBarcodeObject::LinkedObjectName() const
{
    QVariant qax_result = property("LinkedObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IBarcodeObject::SetLinkedObjectName(const QString& value){ setProperty("LinkedObjectName", QVariant(value)); }

inline DYMO_Label_Framework::ObjectRotation IBarcodeObject::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ObjectRotation*)qax_result.constData();
}
inline void IBarcodeObject::SetRotation(DYMO_Label_Framework::ObjectRotation value){ setProperty("Rotation", QVariant(value)); }

inline DYMO_Label_Framework::IFontInfo* IBarcodeObject::TextFont() const
{
    DYMO_Label_Framework::IFontInfo* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("IFontInfo*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo>("IFontInfo", qax_pointer);
    QVariant qax_result = property("TextFont");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IFontInfo**)qax_result.constData();
}
inline void IBarcodeObject::SetTextFont(DYMO_Label_Framework::IFontInfo* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("DYMO_Label_Framework::IFontInfo*", &value);
    setProperty("TextFont", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::BarcodeTextPosition IBarcodeObject::TextPosition() const
{
    QVariant qax_result = property("TextPosition");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::BarcodeTextPosition*)qax_result.constData();
}
inline void IBarcodeObject::SetTextPosition(DYMO_Label_Framework::BarcodeTextPosition value){ setProperty("TextPosition", QVariant(value)); }

inline BarcodeError IBarcodeObject::Validate()
{
    BarcodeError qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}


inline QString LabelObject::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void LabelObject::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QString LabelObject::ObjectType() const
{
    QVariant qax_result = property("ObjectType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString LabelObject::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool LabelObject::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int LabelObject::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* LabelObject::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline DYMO_Label_Framework::BarcodeSize BarcodeObject::BarcodeSize() const
{
    QVariant qax_result = property("BarcodeSize");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::BarcodeSize*)qax_result.constData();
}
inline void BarcodeObject::SetBarcodeSize(DYMO_Label_Framework::BarcodeSize value){ setProperty("BarcodeSize", QVariant(value)); }

inline QString BarcodeObject::BarcodeText() const
{
    QVariant qax_result = property("BarcodeText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void BarcodeObject::SetBarcodeText(const QString& value){ setProperty("BarcodeText", QVariant(value)); }

inline DYMO_Label_Framework::BarcodeType BarcodeObject::BarcodeType() const
{
    QVariant qax_result = property("BarcodeType");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::BarcodeType*)qax_result.constData();
}
inline void BarcodeObject::SetBarcodeType(DYMO_Label_Framework::BarcodeType value){ setProperty("BarcodeType", QVariant(value)); }

inline DYMO_Label_Framework::HorizontalAlignment BarcodeObject::HorizontalAlignment() const
{
    QVariant qax_result = property("HorizontalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::HorizontalAlignment*)qax_result.constData();
}
inline void BarcodeObject::SetHorizontalAlignment(DYMO_Label_Framework::HorizontalAlignment value){ setProperty("HorizontalAlignment", QVariant(value)); }

inline QString BarcodeObject::LinkedObjectName() const
{
    QVariant qax_result = property("LinkedObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void BarcodeObject::SetLinkedObjectName(const QString& value){ setProperty("LinkedObjectName", QVariant(value)); }

inline QString BarcodeObject::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void BarcodeObject::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QString BarcodeObject::ObjectType() const
{
    QVariant qax_result = property("ObjectType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::ObjectRotation BarcodeObject::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ObjectRotation*)qax_result.constData();
}
inline void BarcodeObject::SetRotation(DYMO_Label_Framework::ObjectRotation value){ setProperty("Rotation", QVariant(value)); }

inline DYMO_Label_Framework::IFontInfo* BarcodeObject::TextFont() const
{
    DYMO_Label_Framework::IFontInfo* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("IFontInfo*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo>("IFontInfo", qax_pointer);
    QVariant qax_result = property("TextFont");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IFontInfo**)qax_result.constData();
}
inline void BarcodeObject::SetTextFont(DYMO_Label_Framework::IFontInfo* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("DYMO_Label_Framework::IFontInfo*", &value);
    setProperty("TextFont", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::BarcodeTextPosition BarcodeObject::TextPosition() const
{
    QVariant qax_result = property("TextPosition");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::BarcodeTextPosition*)qax_result.constData();
}
inline void BarcodeObject::SetTextPosition(DYMO_Label_Framework::BarcodeTextPosition value){ setProperty("TextPosition", QVariant(value)); }

inline QString BarcodeObject::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool BarcodeObject::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int BarcodeObject::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* BarcodeObject::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline BarcodeError BarcodeObject::Validate()
{
    BarcodeError qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}


inline DYMO_Label_Framework::IColor* IAddressObject::BackgroundColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("BackgroundColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void IAddressObject::SetBackgroundColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("BackgroundColor", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::PostnetBarcodePosition IAddressObject::BarcodePosition() const
{
    QVariant qax_result = property("BarcodePosition");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::PostnetBarcodePosition*)qax_result.constData();
}
inline void IAddressObject::SetBarcodePosition(DYMO_Label_Framework::PostnetBarcodePosition value){ setProperty("BarcodePosition", QVariant(value)); }

inline DYMO_Label_Framework::TextFitMode IAddressObject::FitMode() const
{
    QVariant qax_result = property("FitMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextFitMode*)qax_result.constData();
}
inline void IAddressObject::SetFitMode(DYMO_Label_Framework::TextFitMode value){ setProperty("FitMode", QVariant(value)); }

inline DYMO_Label_Framework::TextAlignment IAddressObject::HorizontalAlignment() const
{
    QVariant qax_result = property("HorizontalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextAlignment*)qax_result.constData();
}
inline void IAddressObject::SetHorizontalAlignment(DYMO_Label_Framework::TextAlignment value){ setProperty("HorizontalAlignment", QVariant(value)); }

inline bool IAddressObject::IsMirrored() const
{
    QVariant qax_result = property("IsMirrored");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IAddressObject::SetIsMirrored(bool value){ setProperty("IsMirrored", QVariant(value)); }

inline int IAddressObject::LineCount() const
{
    QVariant qax_result = property("LineCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline DYMO_Label_Framework::ObjectRotation IAddressObject::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ObjectRotation*)qax_result.constData();
}
inline void IAddressObject::SetRotation(DYMO_Label_Framework::ObjectRotation value){ setProperty("Rotation", QVariant(value)); }

inline QString IAddressObject::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IAddressObject::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline DYMO_Label_Framework::IColor* IAddressObject::TextColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("TextColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void IAddressObject::SetTextColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("TextColor", QVariant(typeId, &value));
}

inline QString IAddressObject::TextMarkup() const
{
    QVariant qax_result = property("TextMarkup");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IAddressObject::SetTextMarkup(const QString& value){ setProperty("TextMarkup", QVariant(value)); }

inline DYMO_Label_Framework::TextVerticalAlignment IAddressObject::VerticalAlignment() const
{
    QVariant qax_result = property("VerticalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextVerticalAlignment*)qax_result.constData();
}
inline void IAddressObject::SetVerticalAlignment(DYMO_Label_Framework::TextVerticalAlignment value){ setProperty("VerticalAlignment", QVariant(value)); }

inline void IAddressObject::SetLineFont(int lineNo, DYMO_Label_Framework::IFontInfo* FontInfo)
{
    void *_a[] = {0, (void*)&lineNo, (void*)&FontInfo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}


inline DYMO_Label_Framework::IColor* AddressObject::BackgroundColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("BackgroundColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void AddressObject::SetBackgroundColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("BackgroundColor", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::PostnetBarcodePosition AddressObject::BarcodePosition() const
{
    QVariant qax_result = property("BarcodePosition");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::PostnetBarcodePosition*)qax_result.constData();
}
inline void AddressObject::SetBarcodePosition(DYMO_Label_Framework::PostnetBarcodePosition value){ setProperty("BarcodePosition", QVariant(value)); }

inline DYMO_Label_Framework::TextFitMode AddressObject::FitMode() const
{
    QVariant qax_result = property("FitMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextFitMode*)qax_result.constData();
}
inline void AddressObject::SetFitMode(DYMO_Label_Framework::TextFitMode value){ setProperty("FitMode", QVariant(value)); }

inline DYMO_Label_Framework::TextAlignment AddressObject::HorizontalAlignment() const
{
    QVariant qax_result = property("HorizontalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextAlignment*)qax_result.constData();
}
inline void AddressObject::SetHorizontalAlignment(DYMO_Label_Framework::TextAlignment value){ setProperty("HorizontalAlignment", QVariant(value)); }

inline bool AddressObject::IsMirrored() const
{
    QVariant qax_result = property("IsMirrored");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void AddressObject::SetIsMirrored(bool value){ setProperty("IsMirrored", QVariant(value)); }

inline int AddressObject::LineCount() const
{
    QVariant qax_result = property("LineCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString AddressObject::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void AddressObject::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QString AddressObject::ObjectType() const
{
    QVariant qax_result = property("ObjectType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::ObjectRotation AddressObject::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ObjectRotation*)qax_result.constData();
}
inline void AddressObject::SetRotation(DYMO_Label_Framework::ObjectRotation value){ setProperty("Rotation", QVariant(value)); }

inline QString AddressObject::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void AddressObject::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline DYMO_Label_Framework::IColor* AddressObject::TextColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("TextColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void AddressObject::SetTextColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("TextColor", QVariant(typeId, &value));
}

inline QString AddressObject::TextMarkup() const
{
    QVariant qax_result = property("TextMarkup");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void AddressObject::SetTextMarkup(const QString& value){ setProperty("TextMarkup", QVariant(value)); }

inline QString AddressObject::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::TextVerticalAlignment AddressObject::VerticalAlignment() const
{
    QVariant qax_result = property("VerticalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextVerticalAlignment*)qax_result.constData();
}
inline void AddressObject::SetVerticalAlignment(DYMO_Label_Framework::TextVerticalAlignment value){ setProperty("VerticalAlignment", QVariant(value)); }

inline bool AddressObject::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int AddressObject::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* AddressObject::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void AddressObject::SetLineFont(int lineNo, DYMO_Label_Framework::IFontInfo* FontInfo)
{
    void *_a[] = {0, (void*)&lineNo, (void*)&FontInfo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}


inline double IRect::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double IRect::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double IRect::X() const
{
    QVariant qax_result = property("X");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double IRect::Y() const
{
    QVariant qax_result = property("Y");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}


inline double Rect::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline QString Rect::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double Rect::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double Rect::X() const
{
    QVariant qax_result = property("X");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double Rect::Y() const
{
    QVariant qax_result = property("Y");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline bool Rect::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int Rect::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* Rect::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline DYMO_Label_Framework::IColor* ITextObject::BackgroundColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("BackgroundColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void ITextObject::SetBackgroundColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("BackgroundColor", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::TextFitMode ITextObject::FitMode() const
{
    QVariant qax_result = property("FitMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextFitMode*)qax_result.constData();
}
inline void ITextObject::SetFitMode(DYMO_Label_Framework::TextFitMode value){ setProperty("FitMode", QVariant(value)); }

inline DYMO_Label_Framework::TextAlignment ITextObject::HorizontalAlignment() const
{
    QVariant qax_result = property("HorizontalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextAlignment*)qax_result.constData();
}
inline void ITextObject::SetHorizontalAlignment(DYMO_Label_Framework::TextAlignment value){ setProperty("HorizontalAlignment", QVariant(value)); }

inline bool ITextObject::IsMirrored() const
{
    QVariant qax_result = property("IsMirrored");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ITextObject::SetIsMirrored(bool value){ setProperty("IsMirrored", QVariant(value)); }

inline DYMO_Label_Framework::ObjectRotation ITextObject::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ObjectRotation*)qax_result.constData();
}
inline void ITextObject::SetRotation(DYMO_Label_Framework::ObjectRotation value){ setProperty("Rotation", QVariant(value)); }

inline QString ITextObject::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ITextObject::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline DYMO_Label_Framework::IColor* ITextObject::TextColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("TextColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void ITextObject::SetTextColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("TextColor", QVariant(typeId, &value));
}

inline QString ITextObject::TextMarkup() const
{
    QVariant qax_result = property("TextMarkup");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ITextObject::SetTextMarkup(const QString& value){ setProperty("TextMarkup", QVariant(value)); }

inline DYMO_Label_Framework::TextVerticalAlignment ITextObject::VerticalAlignment() const
{
    QVariant qax_result = property("VerticalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextVerticalAlignment*)qax_result.constData();
}
inline void ITextObject::SetVerticalAlignment(DYMO_Label_Framework::TextVerticalAlignment value){ setProperty("VerticalAlignment", QVariant(value)); }

inline bool ITextObject::Verticalized() const
{
    QVariant qax_result = property("Verticalized");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ITextObject::SetVerticalized(bool value){ setProperty("Verticalized", QVariant(value)); }

inline void ITextObject::SetLineFont(int lineNo, DYMO_Label_Framework::IFontInfo* FontInfo)
{
    void *_a[] = {0, (void*)&lineNo, (void*)&FontInfo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline DYMO_Label_Framework::IColor* TextObject::BackgroundColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("BackgroundColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void TextObject::SetBackgroundColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("BackgroundColor", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::TextFitMode TextObject::FitMode() const
{
    QVariant qax_result = property("FitMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextFitMode*)qax_result.constData();
}
inline void TextObject::SetFitMode(DYMO_Label_Framework::TextFitMode value){ setProperty("FitMode", QVariant(value)); }

inline DYMO_Label_Framework::TextAlignment TextObject::HorizontalAlignment() const
{
    QVariant qax_result = property("HorizontalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextAlignment*)qax_result.constData();
}
inline void TextObject::SetHorizontalAlignment(DYMO_Label_Framework::TextAlignment value){ setProperty("HorizontalAlignment", QVariant(value)); }

inline bool TextObject::IsMirrored() const
{
    QVariant qax_result = property("IsMirrored");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void TextObject::SetIsMirrored(bool value){ setProperty("IsMirrored", QVariant(value)); }

inline QString TextObject::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void TextObject::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QString TextObject::ObjectType() const
{
    QVariant qax_result = property("ObjectType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::ObjectRotation TextObject::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ObjectRotation*)qax_result.constData();
}
inline void TextObject::SetRotation(DYMO_Label_Framework::ObjectRotation value){ setProperty("Rotation", QVariant(value)); }

inline QString TextObject::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void TextObject::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline DYMO_Label_Framework::IColor* TextObject::TextColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("TextColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void TextObject::SetTextColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("TextColor", QVariant(typeId, &value));
}

inline QString TextObject::TextMarkup() const
{
    QVariant qax_result = property("TextMarkup");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void TextObject::SetTextMarkup(const QString& value){ setProperty("TextMarkup", QVariant(value)); }

inline QString TextObject::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::TextVerticalAlignment TextObject::VerticalAlignment() const
{
    QVariant qax_result = property("VerticalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextVerticalAlignment*)qax_result.constData();
}
inline void TextObject::SetVerticalAlignment(DYMO_Label_Framework::TextVerticalAlignment value){ setProperty("VerticalAlignment", QVariant(value)); }

inline bool TextObject::Verticalized() const
{
    QVariant qax_result = property("Verticalized");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void TextObject::SetVerticalized(bool value){ setProperty("Verticalized", QVariant(value)); }

inline bool TextObject::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int TextObject::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* TextObject::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void TextObject::SetLineFont(int lineNo, DYMO_Label_Framework::IFontInfo* FontInfo)
{
    void *_a[] = {0, (void*)&lineNo, (void*)&FontInfo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline int IPrinters::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline DYMO_Label_Framework::IPrinter* IPrinters::GetPrinterByName(const QString& printerName)
{
    DYMO_Label_Framework::IPrinter* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IPrinter*>("IPrinter*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IPrinter>("IPrinter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&printerName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IPrinter* IPrinters::Item(int index)
{
    DYMO_Label_Framework::IPrinter* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IPrinter*>("IPrinter*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IPrinter>("IPrinter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline bool IPrinter::IsConnected() const
{
    QVariant qax_result = property("IsConnected");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IPrinter::IsLocal() const
{
    QVariant qax_result = property("IsLocal");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IPrinter::ModelName() const
{
    QVariant qax_result = property("ModelName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IPrinter::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IPrinter::PrinterType() const
{
    QVariant qax_result = property("PrinterType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::IPrintJob* IPrinter::CreatePrintJob(DYMO_Label_Framework::IPrintParams* printParams)
{
    DYMO_Label_Framework::IPrintJob* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IPrintJob*>("IPrintJob*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IPrintJob>("IPrintJob", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&printParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline void IPrintJob::AddLabel(DYMO_Label_Framework::ILabel* label)
{
    void *_a[] = {0, (void*)&label};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IPrintJob::Print()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline bool Printer::IsConnected() const
{
    QVariant qax_result = property("IsConnected");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool Printer::IsLocal() const
{
    QVariant qax_result = property("IsLocal");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString Printer::ModelName() const
{
    QVariant qax_result = property("ModelName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString Printer::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString Printer::PrinterType() const
{
    QVariant qax_result = property("PrinterType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString Printer::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::IPrintJob* Printer::CreatePrintJob(DYMO_Label_Framework::IPrintParams* printParams)
{
    DYMO_Label_Framework::IPrintJob* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IPrintJob*>("IPrintJob*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IPrintJob>("IPrintJob", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&printParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool Printer::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int Printer::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline mscorlib::_Type* Printer::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}


inline QString PrintJob::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void PrintJob::AddLabel(DYMO_Label_Framework::ILabel* label)
{
    void *_a[] = {0, (void*)&label};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline bool PrintJob::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int PrintJob::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline mscorlib::_Type* PrintJob::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void PrintJob::Print()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline int Printers::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Printers::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool Printers::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline stdole::IEnumVARIANT* Printers::GetEnumerator()
{
    stdole::IEnumVARIANT* qax_result = 0;
#ifdef QAX_DUMPCPP_STDOLE_H
    qRegisterMetaType<stdole::IEnumVARIANT*>("stdole::IEnumVARIANT*", &qax_result);
    qRegisterMetaType<stdole::IEnumVARIANT>("stdole::IEnumVARIANT", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int Printers::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IPrinter* Printers::GetPrinterByName(const QString& printerName)
{
    DYMO_Label_Framework::IPrinter* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IPrinter*>("IPrinter*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IPrinter>("IPrinter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&printerName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline mscorlib::_Type* Printers::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IPrinter* Printers::Item(int index)
{
    DYMO_Label_Framework::IPrinter* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IPrinter*>("IPrinter*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IPrinter>("IPrinter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}


inline DYMO_Label_Framework::IColor* ICircularTextObject::BackgroundColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("BackgroundColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void ICircularTextObject::SetBackgroundColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("BackgroundColor", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::CurcularTextDisplayMode ICircularTextObject::DisplayMode() const
{
    QVariant qax_result = property("DisplayMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::CurcularTextDisplayMode*)qax_result.constData();
}
inline void ICircularTextObject::SetDisplayMode(DYMO_Label_Framework::CurcularTextDisplayMode value){ setProperty("DisplayMode", QVariant(value)); }

inline DYMO_Label_Framework::IFontInfo* ICircularTextObject::Font() const
{
    DYMO_Label_Framework::IFontInfo* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("IFontInfo*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo>("IFontInfo", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IFontInfo**)qax_result.constData();
}
inline void ICircularTextObject::SetFont(DYMO_Label_Framework::IFontInfo* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("DYMO_Label_Framework::IFontInfo*", &value);
    setProperty("Font", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::ObjectRotation ICircularTextObject::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ObjectRotation*)qax_result.constData();
}
inline void ICircularTextObject::SetRotation(DYMO_Label_Framework::ObjectRotation value){ setProperty("Rotation", QVariant(value)); }

inline double ICircularTextObject::StartAngle() const
{
    QVariant qax_result = property("StartAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ICircularTextObject::SetStartAngle(double value){ setProperty("StartAngle", QVariant(value)); }

inline QString ICircularTextObject::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ICircularTextObject::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline DYMO_Label_Framework::CircleTextAlignment ICircularTextObject::TextAlignment() const
{
    QVariant qax_result = property("TextAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::CircleTextAlignment*)qax_result.constData();
}
inline void ICircularTextObject::SetTextAlignment(DYMO_Label_Framework::CircleTextAlignment value){ setProperty("TextAlignment", QVariant(value)); }

inline DYMO_Label_Framework::IColor* ICircularTextObject::TextColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("TextColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void ICircularTextObject::SetTextColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("TextColor", QVariant(typeId, &value));
}


inline DYMO_Label_Framework::IColor* CircularTextObject::BackgroundColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("BackgroundColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void CircularTextObject::SetBackgroundColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("BackgroundColor", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::CurcularTextDisplayMode CircularTextObject::DisplayMode() const
{
    QVariant qax_result = property("DisplayMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::CurcularTextDisplayMode*)qax_result.constData();
}
inline void CircularTextObject::SetDisplayMode(DYMO_Label_Framework::CurcularTextDisplayMode value){ setProperty("DisplayMode", QVariant(value)); }

inline DYMO_Label_Framework::IFontInfo* CircularTextObject::Font() const
{
    DYMO_Label_Framework::IFontInfo* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("IFontInfo*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo>("IFontInfo", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IFontInfo**)qax_result.constData();
}
inline void CircularTextObject::SetFont(DYMO_Label_Framework::IFontInfo* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("DYMO_Label_Framework::IFontInfo*", &value);
    setProperty("Font", QVariant(typeId, &value));
}

inline QString CircularTextObject::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void CircularTextObject::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QString CircularTextObject::ObjectType() const
{
    QVariant qax_result = property("ObjectType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::ObjectRotation CircularTextObject::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ObjectRotation*)qax_result.constData();
}
inline void CircularTextObject::SetRotation(DYMO_Label_Framework::ObjectRotation value){ setProperty("Rotation", QVariant(value)); }

inline double CircularTextObject::StartAngle() const
{
    QVariant qax_result = property("StartAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void CircularTextObject::SetStartAngle(double value){ setProperty("StartAngle", QVariant(value)); }

inline QString CircularTextObject::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void CircularTextObject::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline DYMO_Label_Framework::CircleTextAlignment CircularTextObject::TextAlignment() const
{
    QVariant qax_result = property("TextAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::CircleTextAlignment*)qax_result.constData();
}
inline void CircularTextObject::SetTextAlignment(DYMO_Label_Framework::CircleTextAlignment value){ setProperty("TextAlignment", QVariant(value)); }

inline DYMO_Label_Framework::IColor* CircularTextObject::TextColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("TextColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void CircularTextObject::SetTextColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("TextColor", QVariant(typeId, &value));
}

inline QString CircularTextObject::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool CircularTextObject::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int CircularTextObject::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* CircularTextObject::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline int IPrintParams::Copies() const
{
    QVariant qax_result = property("Copies");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IPrintParams::SetCopies(int value){ setProperty("Copies", QVariant(value)); }

inline DYMO_Label_Framework::FlowDirection IPrintParams::FlowDirection() const
{
    QVariant qax_result = property("FlowDirection");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::FlowDirection*)qax_result.constData();
}
inline void IPrintParams::SetFlowDirection(DYMO_Label_Framework::FlowDirection value){ setProperty("FlowDirection", QVariant(value)); }

inline QString IPrintParams::JobTitle() const
{
    QVariant qax_result = property("JobTitle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IPrintParams::SetJobTitle(const QString& value){ setProperty("JobTitle", QVariant(value)); }


inline DYMO_Label_Framework::LabelWriterPrintQuality ILabelWriterPrintParams::PrintQuality() const
{
    QVariant qax_result = property("PrintQuality");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::LabelWriterPrintQuality*)qax_result.constData();
}
inline void ILabelWriterPrintParams::SetPrintQuality(DYMO_Label_Framework::LabelWriterPrintQuality value){ setProperty("PrintQuality", QVariant(value)); }

inline DYMO_Label_Framework::RollSelection ILabelWriterPrintParams::RollSelection() const
{
    QVariant qax_result = property("RollSelection");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::RollSelection*)qax_result.constData();
}
inline void ILabelWriterPrintParams::SetRollSelection(DYMO_Label_Framework::RollSelection value){ setProperty("RollSelection", QVariant(value)); }


inline int LabelWriterPrintParams::Copies() const
{
    QVariant qax_result = property("Copies");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void LabelWriterPrintParams::SetCopies(int value){ setProperty("Copies", QVariant(value)); }

inline DYMO_Label_Framework::FlowDirection LabelWriterPrintParams::FlowDirection() const
{
    QVariant qax_result = property("FlowDirection");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::FlowDirection*)qax_result.constData();
}
inline void LabelWriterPrintParams::SetFlowDirection(DYMO_Label_Framework::FlowDirection value){ setProperty("FlowDirection", QVariant(value)); }

inline QString LabelWriterPrintParams::JobTitle() const
{
    QVariant qax_result = property("JobTitle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void LabelWriterPrintParams::SetJobTitle(const QString& value){ setProperty("JobTitle", QVariant(value)); }

inline DYMO_Label_Framework::LabelWriterPrintQuality LabelWriterPrintParams::PrintQuality() const
{
    QVariant qax_result = property("PrintQuality");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::LabelWriterPrintQuality*)qax_result.constData();
}
inline void LabelWriterPrintParams::SetPrintQuality(DYMO_Label_Framework::LabelWriterPrintQuality value){ setProperty("PrintQuality", QVariant(value)); }

inline DYMO_Label_Framework::RollSelection LabelWriterPrintParams::RollSelection() const
{
    QVariant qax_result = property("RollSelection");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::RollSelection*)qax_result.constData();
}
inline void LabelWriterPrintParams::SetRollSelection(DYMO_Label_Framework::RollSelection value){ setProperty("RollSelection", QVariant(value)); }

inline QString LabelWriterPrintParams::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool LabelWriterPrintParams::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int LabelWriterPrintParams::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* LabelWriterPrintParams::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline DYMO_Label_Framework::TapeAlignment ITapePrintParams::TapeAlignment() const
{
    QVariant qax_result = property("TapeAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TapeAlignment*)qax_result.constData();
}
inline void ITapePrintParams::SetTapeAlignment(DYMO_Label_Framework::TapeAlignment value){ setProperty("TapeAlignment", QVariant(value)); }

inline DYMO_Label_Framework::TapeCutMode ITapePrintParams::TapeCutMode() const
{
    QVariant qax_result = property("TapeCutMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TapeCutMode*)qax_result.constData();
}
inline void ITapePrintParams::SetTapeCutMode(DYMO_Label_Framework::TapeCutMode value){ setProperty("TapeCutMode", QVariant(value)); }


inline int TapePrintParams::Copies() const
{
    QVariant qax_result = property("Copies");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TapePrintParams::SetCopies(int value){ setProperty("Copies", QVariant(value)); }

inline DYMO_Label_Framework::FlowDirection TapePrintParams::FlowDirection() const
{
    QVariant qax_result = property("FlowDirection");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::FlowDirection*)qax_result.constData();
}
inline void TapePrintParams::SetFlowDirection(DYMO_Label_Framework::FlowDirection value){ setProperty("FlowDirection", QVariant(value)); }

inline QString TapePrintParams::JobTitle() const
{
    QVariant qax_result = property("JobTitle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void TapePrintParams::SetJobTitle(const QString& value){ setProperty("JobTitle", QVariant(value)); }

inline DYMO_Label_Framework::TapeAlignment TapePrintParams::TapeAlignment() const
{
    QVariant qax_result = property("TapeAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TapeAlignment*)qax_result.constData();
}
inline void TapePrintParams::SetTapeAlignment(DYMO_Label_Framework::TapeAlignment value){ setProperty("TapeAlignment", QVariant(value)); }

inline DYMO_Label_Framework::TapeCutMode TapePrintParams::TapeCutMode() const
{
    QVariant qax_result = property("TapeCutMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TapeCutMode*)qax_result.constData();
}
inline void TapePrintParams::SetTapeCutMode(DYMO_Label_Framework::TapeCutMode value){ setProperty("TapeCutMode", QVariant(value)); }

inline QString TapePrintParams::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool TapePrintParams::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int TapePrintParams::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* TapePrintParams::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline DYMO_Label_Framework::FlowDirection ILabelRenderParams::FlowDirection() const
{
    QVariant qax_result = property("FlowDirection");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::FlowDirection*)qax_result.constData();
}
inline void ILabelRenderParams::SetFlowDirection(DYMO_Label_Framework::FlowDirection value){ setProperty("FlowDirection", QVariant(value)); }

inline DYMO_Label_Framework::IColor* ILabelRenderParams::LabelColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("LabelColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void ILabelRenderParams::SetLabelColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("LabelColor", QVariant(typeId, &value));
}

inline bool ILabelRenderParams::PngUseDisplayResolution() const
{
    QVariant qax_result = property("PngUseDisplayResolution");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ILabelRenderParams::SetPngUseDisplayResolution(bool value){ setProperty("PngUseDisplayResolution", QVariant(value)); }

inline DYMO_Label_Framework::IColor* ILabelRenderParams::ShadowColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("ShadowColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void ILabelRenderParams::SetShadowColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("ShadowColor", QVariant(typeId, &value));
}

inline double ILabelRenderParams::ShadowDepth() const
{
    QVariant qax_result = property("ShadowDepth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ILabelRenderParams::SetShadowDepth(double value){ setProperty("ShadowDepth", QVariant(value)); }


inline DYMO_Label_Framework::FlowDirection LabelRenderParams::FlowDirection() const
{
    QVariant qax_result = property("FlowDirection");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::FlowDirection*)qax_result.constData();
}
inline void LabelRenderParams::SetFlowDirection(DYMO_Label_Framework::FlowDirection value){ setProperty("FlowDirection", QVariant(value)); }

inline DYMO_Label_Framework::IColor* LabelRenderParams::LabelColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("LabelColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void LabelRenderParams::SetLabelColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("LabelColor", QVariant(typeId, &value));
}

inline bool LabelRenderParams::PngUseDisplayResolution() const
{
    QVariant qax_result = property("PngUseDisplayResolution");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void LabelRenderParams::SetPngUseDisplayResolution(bool value){ setProperty("PngUseDisplayResolution", QVariant(value)); }

inline DYMO_Label_Framework::IColor* LabelRenderParams::ShadowColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("ShadowColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void LabelRenderParams::SetShadowColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("ShadowColor", QVariant(typeId, &value));
}

inline double LabelRenderParams::ShadowDepth() const
{
    QVariant qax_result = property("ShadowDepth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void LabelRenderParams::SetShadowDepth(double value){ setProperty("ShadowDepth", QVariant(value)); }

inline QString LabelRenderParams::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool LabelRenderParams::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int LabelRenderParams::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* LabelRenderParams::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline bool ILabelWriterPrinter::IsTwinTurbo() const
{
    QVariant qax_result = property("IsTwinTurbo");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}


inline bool LabelWriterPrinter::IsConnected() const
{
    QVariant qax_result = property("IsConnected");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool LabelWriterPrinter::IsLocal() const
{
    QVariant qax_result = property("IsLocal");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool LabelWriterPrinter::IsTwinTurbo() const
{
    QVariant qax_result = property("IsTwinTurbo");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString LabelWriterPrinter::ModelName() const
{
    QVariant qax_result = property("ModelName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString LabelWriterPrinter::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString LabelWriterPrinter::PrinterType() const
{
    QVariant qax_result = property("PrinterType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString LabelWriterPrinter::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::IPrintJob* LabelWriterPrinter::CreatePrintJob(DYMO_Label_Framework::IPrintParams* printParams)
{
    DYMO_Label_Framework::IPrintJob* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IPrintJob*>("IPrintJob*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IPrintJob>("IPrintJob", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&printParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool LabelWriterPrinter::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int LabelWriterPrinter::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline mscorlib::_Type* LabelWriterPrinter::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}


inline int ILabel::AddressObjectCount() const
{
    QVariant qax_result = property("AddressObjectCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline DYMO_Label_Framework::ILabelObjects* ILabel::LabelObjects() const
{
    DYMO_Label_Framework::ILabelObjects* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabelObjects*>("ILabelObjects*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::ILabelObjects>("ILabelObjects", qax_pointer);
    QVariant qax_result = property("LabelObjects");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ILabelObjects**)qax_result.constData();
}

inline QString ILabel::LabelType() const
{
    QVariant qax_result = property("LabelType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::ILabelObject* ILabel::GetObjectByName(const QString& objectName)
{
    DYMO_Label_Framework::ILabelObject* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject*>("ILabelObject*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject>("ILabelObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&objectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IStringList* ILabel::GetObjectNames()
{
    DYMO_Label_Framework::IStringList* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IStringList*>("IStringList*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IStringList>("IStringList", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QString ILabel::GetObjectText(const QString& objectName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&objectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void ILabel::Print(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::IPrintParams* printParams)
{
    void *_a[] = {0, (void*)&Printer, (void*)&printParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void ILabel::PrintLabelSet(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::IPrintParams* printParams, const QString& labelSetXml)
{
    void *_a[] = {0, (void*)&Printer, (void*)&printParams, (void*)&labelSetXml};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline QByteArray ILabel::RenderAsPng(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::ILabelRenderParams* renderParams)
{
    QByteArray qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Printer, (void*)&renderParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QString ILabel::RenderAsPngBase64(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::ILabelRenderParams* renderParams)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Printer, (void*)&renderParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void ILabel::SaveToFile(const QString& fileName)
{
    void *_a[] = {0, (void*)&fileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline QString ILabel::SaveToXml()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void ILabel::SetAddressText(int index, const QString& Text)
{
    void *_a[] = {0, (void*)&index, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void ILabel::SetImagePngData(const QString& imageName, const QByteArray& pngData)
{
    void *_a[] = {0, (void*)&imageName, (void*)&pngData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void ILabel::SetImagePngDataBase64(const QString& imageName, const QString& pngData)
{
    void *_a[] = {0, (void*)&imageName, (void*)&pngData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void ILabel::SetImageUri(const QString& imageName, const QString& uri)
{
    void *_a[] = {0, (void*)&imageName, (void*)&uri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void ILabel::SetObjectText(const QString& objectName, const QString& Text)
{
    void *_a[] = {0, (void*)&objectName, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void ILabel::SetPostnetBarcodePosition(int index, DYMO_Label_Framework::PostnetBarcodePosition position)
{
    void *_a[] = {0, (void*)&index, (void*)&position};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}


inline void IDieCutLabel::AddObject(DYMO_Label_Framework::ILabelObject* obj, DYMO_Label_Framework::IRect* bounds)
{
    void *_a[] = {0, (void*)&obj, (void*)&bounds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IDieCutLabel::BringToFront(DYMO_Label_Framework::ILabelObject* obj)
{
    void *_a[] = {0, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IDieCutLabel::DeleteObject(DYMO_Label_Framework::ILabelObject* obj)
{
    void *_a[] = {0, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline DYMO_Label_Framework::IRect* IDieCutLabel::GetObjectPosition(const QString& objectName)
{
    DYMO_Label_Framework::IRect* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IRect*>("IRect*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IRect>("IRect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&objectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void IDieCutLabel::MoveObject(DYMO_Label_Framework::ILabelObject* obj, double X, double Y)
{
    void *_a[] = {0, (void*)&obj, (void*)&X, (void*)&Y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IDieCutLabel::ResizeObject(DYMO_Label_Framework::ILabelObject* obj, double Width, double Height)
{
    void *_a[] = {0, (void*)&obj, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IDieCutLabel::SendToBack(DYMO_Label_Framework::ILabelObject* obj)
{
    void *_a[] = {0, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IDieCutLabel::SetObjectPosition(const QString& objectName, DYMO_Label_Framework::IRect* position)
{
    void *_a[] = {0, (void*)&objectName, (void*)&position};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline int DieCutLabel::AddressObjectCount() const
{
    QVariant qax_result = property("AddressObjectCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline DYMO_Label_Framework::ILabelObjects* DieCutLabel::LabelObjects() const
{
    DYMO_Label_Framework::ILabelObjects* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabelObjects*>("ILabelObjects*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::ILabelObjects>("ILabelObjects", qax_pointer);
    QVariant qax_result = property("LabelObjects");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ILabelObjects**)qax_result.constData();
}

inline QString DieCutLabel::LabelType() const
{
    QVariant qax_result = property("LabelType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString DieCutLabel::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void DieCutLabel::AddObject(DYMO_Label_Framework::ILabelObject* obj, DYMO_Label_Framework::IRect* bounds)
{
    void *_a[] = {0, (void*)&obj, (void*)&bounds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void DieCutLabel::BringToFront(DYMO_Label_Framework::ILabelObject* obj)
{
    void *_a[] = {0, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void DieCutLabel::DeleteObject(DYMO_Label_Framework::ILabelObject* obj)
{
    void *_a[] = {0, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline bool DieCutLabel::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline int DieCutLabel::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline DYMO_Label_Framework::ILabelObject* DieCutLabel::GetObjectByName(const QString& objectName)
{
    DYMO_Label_Framework::ILabelObject* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject*>("ILabelObject*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject>("ILabelObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&objectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IStringList* DieCutLabel::GetObjectNames()
{
    DYMO_Label_Framework::IStringList* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IStringList*>("IStringList*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IStringList>("IStringList", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IRect* DieCutLabel::GetObjectPosition(const QString& objectName)
{
    DYMO_Label_Framework::IRect* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IRect*>("IRect*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IRect>("IRect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&objectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline QString DieCutLabel::GetObjectText(const QString& objectName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&objectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline mscorlib::_Type* DieCutLabel::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void DieCutLabel::MoveObject(DYMO_Label_Framework::ILabelObject* obj, double X, double Y)
{
    void *_a[] = {0, (void*)&obj, (void*)&X, (void*)&Y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void DieCutLabel::Print(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::IPrintParams* printParams)
{
    void *_a[] = {0, (void*)&Printer, (void*)&printParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void DieCutLabel::PrintLabelSet(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::IPrintParams* printParams, const QString& labelSetXml)
{
    void *_a[] = {0, (void*)&Printer, (void*)&printParams, (void*)&labelSetXml};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline QByteArray DieCutLabel::RenderAsPng(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::ILabelRenderParams* renderParams)
{
    QByteArray qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Printer, (void*)&renderParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline QString DieCutLabel::RenderAsPngBase64(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::ILabelRenderParams* renderParams)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Printer, (void*)&renderParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline void DieCutLabel::ResizeObject(DYMO_Label_Framework::ILabelObject* obj, double Width, double Height)
{
    void *_a[] = {0, (void*)&obj, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void DieCutLabel::SaveToFile(const QString& fileName)
{
    void *_a[] = {0, (void*)&fileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline QString DieCutLabel::SaveToXml()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void DieCutLabel::SendToBack(DYMO_Label_Framework::ILabelObject* obj)
{
    void *_a[] = {0, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void DieCutLabel::SetAddressText(int index, const QString& Text)
{
    void *_a[] = {0, (void*)&index, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void DieCutLabel::SetImagePngData(const QString& imageName, const QByteArray& pngData)
{
    void *_a[] = {0, (void*)&imageName, (void*)&pngData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void DieCutLabel::SetImagePngDataBase64(const QString& imageName, const QString& pngData)
{
    void *_a[] = {0, (void*)&imageName, (void*)&pngData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void DieCutLabel::SetImageUri(const QString& imageName, const QString& uri)
{
    void *_a[] = {0, (void*)&imageName, (void*)&uri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void DieCutLabel::SetObjectPosition(const QString& objectName, DYMO_Label_Framework::IRect* position)
{
    void *_a[] = {0, (void*)&objectName, (void*)&position};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void DieCutLabel::SetObjectText(const QString& objectName, const QString& Text)
{
    void *_a[] = {0, (void*)&objectName, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void DieCutLabel::SetPostnetBarcodePosition(int index, DYMO_Label_Framework::PostnetBarcodePosition position)
{
    void *_a[] = {0, (void*)&index, (void*)&position};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}


inline QString IWebProxy::Address() const
{
    QVariant qax_result = property("Address");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IWebProxy::SetAddress(const QString& value){ setProperty("Address", QVariant(value)); }

inline DYMO_Label_Framework::IStringList* IWebProxy::BypassList() const
{
    DYMO_Label_Framework::IStringList* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IStringList*>("IStringList*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IStringList>("IStringList", qax_pointer);
    QVariant qax_result = property("BypassList");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IStringList**)qax_result.constData();
}
inline void IWebProxy::SetBypassList(DYMO_Label_Framework::IStringList* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IStringList*>("DYMO_Label_Framework::IStringList*", &value);
    setProperty("BypassList", QVariant(typeId, &value));
}

inline bool IWebProxy::BypassOnLocal() const
{
    QVariant qax_result = property("BypassOnLocal");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IWebProxy::SetBypassOnLocal(bool value){ setProperty("BypassOnLocal", QVariant(value)); }

inline QString IWebProxy::Domain() const
{
    QVariant qax_result = property("Domain");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IWebProxy::SetDomain(const QString& value){ setProperty("Domain", QVariant(value)); }

inline QString IWebProxy::Password() const
{
    QVariant qax_result = property("Password");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IWebProxy::SetPassword(const QString& value){ setProperty("Password", QVariant(value)); }

inline QString IWebProxy::UserName() const
{
    QVariant qax_result = property("UserName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IWebProxy::SetUserName(const QString& value){ setProperty("UserName", QVariant(value)); }


inline QString WebProxy::Address() const
{
    QVariant qax_result = property("Address");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void WebProxy::SetAddress(const QString& value){ setProperty("Address", QVariant(value)); }

inline DYMO_Label_Framework::IStringList* WebProxy::BypassList() const
{
    DYMO_Label_Framework::IStringList* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IStringList*>("IStringList*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IStringList>("IStringList", qax_pointer);
    QVariant qax_result = property("BypassList");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IStringList**)qax_result.constData();
}
inline void WebProxy::SetBypassList(DYMO_Label_Framework::IStringList* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IStringList*>("DYMO_Label_Framework::IStringList*", &value);
    setProperty("BypassList", QVariant(typeId, &value));
}

inline bool WebProxy::BypassOnLocal() const
{
    QVariant qax_result = property("BypassOnLocal");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void WebProxy::SetBypassOnLocal(bool value){ setProperty("BypassOnLocal", QVariant(value)); }

inline QString WebProxy::Domain() const
{
    QVariant qax_result = property("Domain");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void WebProxy::SetDomain(const QString& value){ setProperty("Domain", QVariant(value)); }

inline QString WebProxy::Password() const
{
    QVariant qax_result = property("Password");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void WebProxy::SetPassword(const QString& value){ setProperty("Password", QVariant(value)); }

inline QString WebProxy::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString WebProxy::UserName() const
{
    QVariant qax_result = property("UserName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void WebProxy::SetUserName(const QString& value){ setProperty("UserName", QVariant(value)); }

inline bool WebProxy::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int WebProxy::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* WebProxy::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline DYMO_Label_Framework::IPrinters* IFramework::LabelWriterPrinters() const
{
    DYMO_Label_Framework::IPrinters* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IPrinters*>("IPrinters*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IPrinters>("IPrinters", qax_pointer);
    QVariant qax_result = property("LabelWriterPrinters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IPrinters**)qax_result.constData();
}

inline DYMO_Label_Framework::IPrinters* IFramework::Printers() const
{
    DYMO_Label_Framework::IPrinters* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IPrinters*>("IPrinters*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IPrinters>("IPrinters", qax_pointer);
    QVariant qax_result = property("Printers");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IPrinters**)qax_result.constData();
}

inline DYMO_Label_Framework::IPrinters* IFramework::TapePrinters() const
{
    DYMO_Label_Framework::IPrinters* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IPrinters*>("IPrinters*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IPrinters>("IPrinters", qax_pointer);
    QVariant qax_result = property("TapePrinters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IPrinters**)qax_result.constData();
}

inline DYMO_Label_Framework::IColor* IFramework::BlackColor()
{
    DYMO_Label_Framework::IColor* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IColor* IFramework::CreateColor(uint r, uint g, uint b)
{
    DYMO_Label_Framework::IColor* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&r, (void*)&g, (void*)&b};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IColor* IFramework::CreateColorArgb(uint a, uint r, uint g, uint b)
{
    DYMO_Label_Framework::IColor* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&a, (void*)&r, (void*)&g, (void*)&b};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IContinuousLabel* IFramework::CreateContinuousLabel(const QString& labelId, DYMO_Label_Framework::PaperOrientation PaperOrientation, DYMO_Label_Framework::ContinuousLabelLengthMode lengthMode, double lableLength)
{
    DYMO_Label_Framework::IContinuousLabel* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabel*>("IContinuousLabel*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabel>("IContinuousLabel", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&labelId, (void*)&PaperOrientation, (void*)&lengthMode, (void*)&lableLength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IDieCutLabel* IFramework::CreateDieCutLabel(const QString& labelId, DYMO_Label_Framework::PaperOrientation PaperOrientation)
{
    DYMO_Label_Framework::IDieCutLabel* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IDieCutLabel*>("IDieCutLabel*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IDieCutLabel>("IDieCutLabel", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&labelId, (void*)&PaperOrientation};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IFontInfo* IFramework::CreateFont(const QString& fontName, double fontSize, DYMO_Label_Framework::FontStyle FontStyle)
{
    DYMO_Label_Framework::IFontInfo* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("IFontInfo*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo>("IFontInfo", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&fontName, (void*)&fontSize, (void*)&FontStyle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IRect* IFramework::CreateRect(double X, double Y, double Width, double Height)
{
    DYMO_Label_Framework::IRect* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IRect*>("IRect*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IRect>("IRect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&X, (void*)&Y, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IThickness* IFramework::CreateThickness(double left, double top, double right, double bottom)
{
    DYMO_Label_Framework::IThickness* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IThickness*>("IThickness*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IThickness>("IThickness", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&left, (void*)&top, (void*)&right, (void*)&bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IColor* IFramework::DarkGrayColor()
{
    DYMO_Label_Framework::IColor* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IPrinter* IFramework::GetPrinterByName(const QString& printerName)
{
    DYMO_Label_Framework::IPrinter* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IPrinter*>("IPrinter*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IPrinter>("IPrinter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&printerName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline QString IFramework::GetPrintersInfo()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IColor* IFramework::GrayColor()
{
    DYMO_Label_Framework::IColor* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IColor* IFramework::LightGrayColor()
{
    DYMO_Label_Framework::IColor* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline DYMO_Label_Framework::ILabel* IFramework::OpenLabel(const QString& uri)
{
    DYMO_Label_Framework::ILabel* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabel*>("ILabel*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::ILabel>("ILabel", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&uri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline DYMO_Label_Framework::ILabel* IFramework::OpenLabelXml(const QString& xml)
{
    DYMO_Label_Framework::ILabel* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabel*>("ILabel*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::ILabel>("ILabel", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&xml};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline void IFramework::PrintLabel(const QString& printerName, const QString& printParamsXml, const QString& labelXml, const QString& labelSetXml)
{
    void *_a[] = {0, (void*)&printerName, (void*)&printParamsXml, (void*)&labelXml, (void*)&labelSetXml};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline QString IFramework::RenderLabel(const QString& labelXml, const QString& renderParamsXml, const QString& printerName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&labelXml, (void*)&renderParamsXml, (void*)&printerName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline void IFramework::SetWebProxy(DYMO_Label_Framework::IWebProxy* WebProxy)
{
    void *_a[] = {0, (void*)&WebProxy};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline DYMO_Label_Framework::IColor* IFramework::TransparentColor()
{
    DYMO_Label_Framework::IColor* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IColor* IFramework::WhiteColor()
{
    DYMO_Label_Framework::IColor* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}


inline DYMO_Label_Framework::IPrinters* Framework::LabelWriterPrinters() const
{
    DYMO_Label_Framework::IPrinters* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IPrinters*>("IPrinters*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IPrinters>("IPrinters", qax_pointer);
    QVariant qax_result = property("LabelWriterPrinters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IPrinters**)qax_result.constData();
}

inline DYMO_Label_Framework::IPrinters* Framework::Printers() const
{
    DYMO_Label_Framework::IPrinters* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IPrinters*>("IPrinters*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IPrinters>("IPrinters", qax_pointer);
    QVariant qax_result = property("Printers");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IPrinters**)qax_result.constData();
}

inline DYMO_Label_Framework::IPrinters* Framework::TapePrinters() const
{
    DYMO_Label_Framework::IPrinters* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IPrinters*>("IPrinters*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IPrinters>("IPrinters", qax_pointer);
    QVariant qax_result = property("TapePrinters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IPrinters**)qax_result.constData();
}

inline QString Framework::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::IColor* Framework::BlackColor()
{
    DYMO_Label_Framework::IColor* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IColor* Framework::CreateColor(uint r, uint g, uint b)
{
    DYMO_Label_Framework::IColor* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&r, (void*)&g, (void*)&b};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IColor* Framework::CreateColorArgb(uint a, uint r, uint g, uint b)
{
    DYMO_Label_Framework::IColor* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&a, (void*)&r, (void*)&g, (void*)&b};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IContinuousLabel* Framework::CreateContinuousLabel(const QString& labelId, DYMO_Label_Framework::PaperOrientation PaperOrientation, DYMO_Label_Framework::ContinuousLabelLengthMode lengthMode, double lableLength)
{
    DYMO_Label_Framework::IContinuousLabel* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabel*>("IContinuousLabel*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabel>("IContinuousLabel", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&labelId, (void*)&PaperOrientation, (void*)&lengthMode, (void*)&lableLength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IDieCutLabel* Framework::CreateDieCutLabel(const QString& labelId, DYMO_Label_Framework::PaperOrientation PaperOrientation)
{
    DYMO_Label_Framework::IDieCutLabel* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IDieCutLabel*>("IDieCutLabel*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IDieCutLabel>("IDieCutLabel", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&labelId, (void*)&PaperOrientation};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IFontInfo* Framework::CreateFont(const QString& fontName, double fontSize, DYMO_Label_Framework::FontStyle FontStyle)
{
    DYMO_Label_Framework::IFontInfo* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("IFontInfo*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo>("IFontInfo", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&fontName, (void*)&fontSize, (void*)&FontStyle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IRect* Framework::CreateRect(double X, double Y, double Width, double Height)
{
    DYMO_Label_Framework::IRect* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IRect*>("IRect*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IRect>("IRect", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&X, (void*)&Y, (void*)&Width, (void*)&Height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IThickness* Framework::CreateThickness(double left, double top, double right, double bottom)
{
    DYMO_Label_Framework::IThickness* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IThickness*>("IThickness*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IThickness>("IThickness", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&left, (void*)&top, (void*)&right, (void*)&bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IColor* Framework::DarkGrayColor()
{
    DYMO_Label_Framework::IColor* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline bool Framework::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int Framework::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IPrinter* Framework::GetPrinterByName(const QString& printerName)
{
    DYMO_Label_Framework::IPrinter* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IPrinter*>("IPrinter*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IPrinter>("IPrinter", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&printerName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString Framework::GetPrintersInfo()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline mscorlib::_Type* Framework::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IColor* Framework::GrayColor()
{
    DYMO_Label_Framework::IColor* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IColor* Framework::LightGrayColor()
{
    DYMO_Label_Framework::IColor* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline DYMO_Label_Framework::ILabel* Framework::OpenLabel(const QString& uri)
{
    DYMO_Label_Framework::ILabel* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabel*>("ILabel*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::ILabel>("ILabel", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&uri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline DYMO_Label_Framework::ILabel* Framework::OpenLabelXml(const QString& xml)
{
    DYMO_Label_Framework::ILabel* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabel*>("ILabel*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::ILabel>("ILabel", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&xml};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void Framework::PrintLabel(const QString& printerName, const QString& printParamsXml, const QString& labelXml, const QString& labelSetXml)
{
    void *_a[] = {0, (void*)&printerName, (void*)&printParamsXml, (void*)&labelXml, (void*)&labelSetXml};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline QString Framework::RenderLabel(const QString& labelXml, const QString& renderParamsXml, const QString& printerName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&labelXml, (void*)&renderParamsXml, (void*)&printerName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void Framework::SetWebProxy(DYMO_Label_Framework::IWebProxy* WebProxy)
{
    void *_a[] = {0, (void*)&WebProxy};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline DYMO_Label_Framework::IColor* Framework::TransparentColor()
{
    DYMO_Label_Framework::IColor* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IColor* Framework::WhiteColor()
{
    DYMO_Label_Framework::IColor* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}


inline uint IColor::a() const
{
    QVariant qax_result = property("a");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline uint IColor::b() const
{
    QVariant qax_result = property("b");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline uint IColor::g() const
{
    QVariant qax_result = property("g");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline uint IColor::r() const
{
    QVariant qax_result = property("r");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}


inline QString Color::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline uint Color::a() const
{
    QVariant qax_result = property("a");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline uint Color::b() const
{
    QVariant qax_result = property("b");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline uint Color::g() const
{
    QVariant qax_result = property("g");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline uint Color::r() const
{
    QVariant qax_result = property("r");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline bool Color::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int Color::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* Color::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline int IContinuousLabelCellList::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void IContinuousLabelCellList::Add(DYMO_Label_Framework::IContinuousLabelCell* cell)
{
    void *_a[] = {0, (void*)&cell};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IContinuousLabelCellList::Clear()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline int IContinuousLabelCellList::IndexOf(DYMO_Label_Framework::IContinuousLabelCell* cell)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&cell};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IContinuousLabelCellList::Insert(int index, DYMO_Label_Framework::IContinuousLabelCell* cell)
{
    void *_a[] = {0, (void*)&index, (void*)&cell};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline DYMO_Label_Framework::IContinuousLabelCell* IContinuousLabelCellList::Item(int index)
{
    DYMO_Label_Framework::IContinuousLabelCell* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabelCell*>("IContinuousLabelCell*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabelCell>("IContinuousLabelCell", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IContinuousLabelCellList::Remove(DYMO_Label_Framework::IContinuousLabelCell* cell)
{
    void *_a[] = {0, (void*)&cell};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IContinuousLabelCellList::RemoveAt(int index)
{
    void *_a[] = {0, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IContinuousLabelCellList::SetItem(int index, DYMO_Label_Framework::IContinuousLabelCell* rhs)
{
    void *_a[] = {0, (void*)&index, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline int ContinuousLabelCellList::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString ContinuousLabelCellList::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void ContinuousLabelCellList::Add(DYMO_Label_Framework::IContinuousLabelCell* cell)
{
    void *_a[] = {0, (void*)&cell};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void ContinuousLabelCellList::Clear()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline bool ContinuousLabelCellList::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline stdole::IEnumVARIANT* ContinuousLabelCellList::GetEnumerator()
{
    stdole::IEnumVARIANT* qax_result = 0;
#ifdef QAX_DUMPCPP_STDOLE_H
    qRegisterMetaType<stdole::IEnumVARIANT*>("stdole::IEnumVARIANT*", &qax_result);
    qRegisterMetaType<stdole::IEnumVARIANT>("stdole::IEnumVARIANT", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline int ContinuousLabelCellList::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline mscorlib::_Type* ContinuousLabelCellList::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline int ContinuousLabelCellList::IndexOf(DYMO_Label_Framework::IContinuousLabelCell* cell)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&cell};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void ContinuousLabelCellList::Insert(int index, DYMO_Label_Framework::IContinuousLabelCell* cell)
{
    void *_a[] = {0, (void*)&index, (void*)&cell};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline DYMO_Label_Framework::IContinuousLabelCell* ContinuousLabelCellList::Item(int index)
{
    DYMO_Label_Framework::IContinuousLabelCell* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabelCell*>("IContinuousLabelCell*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabelCell>("IContinuousLabelCell", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void ContinuousLabelCellList::Remove(DYMO_Label_Framework::IContinuousLabelCell* cell)
{
    void *_a[] = {0, (void*)&cell};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void ContinuousLabelCellList::RemoveAt(int index)
{
    void *_a[] = {0, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void ContinuousLabelCellList::SetItem(int index, DYMO_Label_Framework::IContinuousLabelCell* rhs)
{
    void *_a[] = {0, (void*)&index, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}


inline DYMO_Label_Framework::IColor* IContinuousLabelCell::BorderColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("BorderColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void IContinuousLabelCell::SetBorderColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("BorderColor", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::DashStyle IContinuousLabelCell::BorderStyle() const
{
    QVariant qax_result = property("BorderStyle");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::DashStyle*)qax_result.constData();
}
inline void IContinuousLabelCell::SetBorderStyle(DYMO_Label_Framework::DashStyle value){ setProperty("BorderStyle", QVariant(value)); }

inline double IContinuousLabelCell::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IContinuousLabelCell::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline DYMO_Label_Framework::ILabelObject* IContinuousLabelCell::LabelObject() const
{
    DYMO_Label_Framework::ILabelObject* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject*>("ILabelObject*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject>("ILabelObject", qax_pointer);
    QVariant qax_result = property("LabelObject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ILabelObject**)qax_result.constData();
}
inline void IContinuousLabelCell::SetLabelObject(DYMO_Label_Framework::ILabelObject* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::ILabelObject*>("DYMO_Label_Framework::ILabelObject*", &value);
    setProperty("LabelObject", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::IThickness* IContinuousLabelCell::ObjectMargin() const
{
    DYMO_Label_Framework::IThickness* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IThickness*>("IThickness*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IThickness>("IThickness", qax_pointer);
    QVariant qax_result = property("ObjectMargin");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IThickness**)qax_result.constData();
}
inline void IContinuousLabelCell::SetObjectMargin(DYMO_Label_Framework::IThickness* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IThickness*>("DYMO_Label_Framework::IThickness*", &value);
    setProperty("ObjectMargin", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::ContinuousLabelCellSizeMode IContinuousLabelCell::SizeMode() const
{
    QVariant qax_result = property("SizeMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ContinuousLabelCellSizeMode*)qax_result.constData();
}

inline DYMO_Label_Framework::IContinuousLabelCellList* IContinuousLabelCell::Subcells() const
{
    DYMO_Label_Framework::IContinuousLabelCellList* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabelCellList*>("IContinuousLabelCellList*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabelCellList>("IContinuousLabelCellList", qax_pointer);
    QVariant qax_result = property("Subcells");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IContinuousLabelCellList**)qax_result.constData();
}

inline DYMO_Label_Framework::ContinuousSubcellsOrientation IContinuousLabelCell::SubcellsOrientation() const
{
    QVariant qax_result = property("SubcellsOrientation");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ContinuousSubcellsOrientation*)qax_result.constData();
}
inline void IContinuousLabelCell::SetSubcellsOrientation(DYMO_Label_Framework::ContinuousSubcellsOrientation value){ setProperty("SubcellsOrientation", QVariant(value)); }

inline double IContinuousLabelCell::GetFixedSize()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline double IContinuousLabelCell::GetProportionalRatio()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IContinuousLabelCell::SetAutoSize()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IContinuousLabelCell::SetFixedSize(double fixedSize)
{
    void *_a[] = {0, (void*)&fixedSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IContinuousLabelCell::SetProportionalSize(double ratio)
{
    void *_a[] = {0, (void*)&ratio};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}


inline DYMO_Label_Framework::IColor* ContinuousLabelCell::BorderColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("BorderColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void ContinuousLabelCell::SetBorderColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("BorderColor", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::DashStyle ContinuousLabelCell::BorderStyle() const
{
    QVariant qax_result = property("BorderStyle");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::DashStyle*)qax_result.constData();
}
inline void ContinuousLabelCell::SetBorderStyle(DYMO_Label_Framework::DashStyle value){ setProperty("BorderStyle", QVariant(value)); }

inline double ContinuousLabelCell::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ContinuousLabelCell::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline DYMO_Label_Framework::ILabelObject* ContinuousLabelCell::LabelObject() const
{
    DYMO_Label_Framework::ILabelObject* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject*>("ILabelObject*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject>("ILabelObject", qax_pointer);
    QVariant qax_result = property("LabelObject");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ILabelObject**)qax_result.constData();
}
inline void ContinuousLabelCell::SetLabelObject(DYMO_Label_Framework::ILabelObject* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::ILabelObject*>("DYMO_Label_Framework::ILabelObject*", &value);
    setProperty("LabelObject", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::IThickness* ContinuousLabelCell::ObjectMargin() const
{
    DYMO_Label_Framework::IThickness* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IThickness*>("IThickness*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IThickness>("IThickness", qax_pointer);
    QVariant qax_result = property("ObjectMargin");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IThickness**)qax_result.constData();
}
inline void ContinuousLabelCell::SetObjectMargin(DYMO_Label_Framework::IThickness* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IThickness*>("DYMO_Label_Framework::IThickness*", &value);
    setProperty("ObjectMargin", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::ContinuousLabelCellSizeMode ContinuousLabelCell::SizeMode() const
{
    QVariant qax_result = property("SizeMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ContinuousLabelCellSizeMode*)qax_result.constData();
}

inline DYMO_Label_Framework::IContinuousLabelCellList* ContinuousLabelCell::Subcells() const
{
    DYMO_Label_Framework::IContinuousLabelCellList* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabelCellList*>("IContinuousLabelCellList*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabelCellList>("IContinuousLabelCellList", qax_pointer);
    QVariant qax_result = property("Subcells");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IContinuousLabelCellList**)qax_result.constData();
}

inline DYMO_Label_Framework::ContinuousSubcellsOrientation ContinuousLabelCell::SubcellsOrientation() const
{
    QVariant qax_result = property("SubcellsOrientation");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ContinuousSubcellsOrientation*)qax_result.constData();
}
inline void ContinuousLabelCell::SetSubcellsOrientation(DYMO_Label_Framework::ContinuousSubcellsOrientation value){ setProperty("SubcellsOrientation", QVariant(value)); }

inline QString ContinuousLabelCell::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool ContinuousLabelCell::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline double ContinuousLabelCell::GetFixedSize()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int ContinuousLabelCell::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline double ContinuousLabelCell::GetProportionalRatio()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline mscorlib::_Type* ContinuousLabelCell::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void ContinuousLabelCell::SetAutoSize()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void ContinuousLabelCell::SetFixedSize(double fixedSize)
{
    void *_a[] = {0, (void*)&fixedSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void ContinuousLabelCell::SetProportionalSize(double ratio)
{
    void *_a[] = {0, (void*)&ratio};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}


inline double IThickness::bottom() const
{
    QVariant qax_result = property("bottom");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double IThickness::left() const
{
    QVariant qax_result = property("left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double IThickness::right() const
{
    QVariant qax_result = property("right");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double IThickness::top() const
{
    QVariant qax_result = property("top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}


inline QString Thickness::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double Thickness::bottom() const
{
    QVariant qax_result = property("bottom");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double Thickness::left() const
{
    QVariant qax_result = property("left");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double Thickness::right() const
{
    QVariant qax_result = property("right");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double Thickness::top() const
{
    QVariant qax_result = property("top");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline bool Thickness::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int Thickness::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* Thickness::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline DYMO_Label_Framework::FontStyle IFontInfo::FontStyle() const
{
    QVariant qax_result = property("FontStyle");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::FontStyle*)qax_result.constData();
}

inline QString IFontInfo::fontName() const
{
    QVariant qax_result = property("fontName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IFontInfo::fontSize() const
{
    QVariant qax_result = property("fontSize");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}


inline DYMO_Label_Framework::FontStyle FontInfo::FontStyle() const
{
    QVariant qax_result = property("FontStyle");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::FontStyle*)qax_result.constData();
}

inline QString FontInfo::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString FontInfo::fontName() const
{
    QVariant qax_result = property("fontName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double FontInfo::fontSize() const
{
    QVariant qax_result = property("fontSize");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline bool FontInfo::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int FontInfo::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* FontInfo::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline DYMO_Label_Framework::IColor* IShapeObject::FillColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("FillColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void IShapeObject::SetFillColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("FillColor", QVariant(typeId, &value));
}

inline double IShapeObject::LineWidth() const
{
    QVariant qax_result = property("LineWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IShapeObject::SetLineWidth(double value){ setProperty("LineWidth", QVariant(value)); }

inline DYMO_Label_Framework::ShapeType IShapeObject::ShapeType() const
{
    QVariant qax_result = property("ShapeType");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ShapeType*)qax_result.constData();
}
inline void IShapeObject::SetShapeType(DYMO_Label_Framework::ShapeType value){ setProperty("ShapeType", QVariant(value)); }

inline DYMO_Label_Framework::IColor* IShapeObject::StrokeColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("StrokeColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void IShapeObject::SetStrokeColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("StrokeColor", QVariant(typeId, &value));
}


inline DYMO_Label_Framework::IColor* ShapeObject::FillColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("FillColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void ShapeObject::SetFillColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("FillColor", QVariant(typeId, &value));
}

inline double ShapeObject::LineWidth() const
{
    QVariant qax_result = property("LineWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ShapeObject::SetLineWidth(double value){ setProperty("LineWidth", QVariant(value)); }

inline QString ShapeObject::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ShapeObject::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QString ShapeObject::ObjectType() const
{
    QVariant qax_result = property("ObjectType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::ShapeType ShapeObject::ShapeType() const
{
    QVariant qax_result = property("ShapeType");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ShapeType*)qax_result.constData();
}
inline void ShapeObject::SetShapeType(DYMO_Label_Framework::ShapeType value){ setProperty("ShapeType", QVariant(value)); }

inline DYMO_Label_Framework::IColor* ShapeObject::StrokeColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("StrokeColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void ShapeObject::SetStrokeColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("StrokeColor", QVariant(typeId, &value));
}

inline QString ShapeObject::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool ShapeObject::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int ShapeObject::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* ShapeObject::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline void ILabelRecordBuilder::AddImage(const QString& objectName, const QString& imageUri)
{
    void *_a[] = {0, (void*)&objectName, (void*)&imageUri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void ILabelRecordBuilder::AddImagePngBase64(const QString& objectName, const QString& base64Image)
{
    void *_a[] = {0, (void*)&objectName, (void*)&base64Image};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void ILabelRecordBuilder::AddStyledText(const QString& objectName, DYMO_Label_Framework::IStyledText* StyledText)
{
    void *_a[] = {0, (void*)&objectName, (void*)&StyledText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void ILabelRecordBuilder::AddText(const QString& objectName, const QString& Text)
{
    void *_a[] = {0, (void*)&objectName, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void ILabelRecordBuilder::AddTextMarkup(const QString& objectName, const QString& TextMarkup)
{
    void *_a[] = {0, (void*)&objectName, (void*)&TextMarkup};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline QString LabelRecordBuilder::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void LabelRecordBuilder::AddImage(const QString& objectName, const QString& imageUri)
{
    void *_a[] = {0, (void*)&objectName, (void*)&imageUri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void LabelRecordBuilder::AddImagePngBase64(const QString& objectName, const QString& base64Image)
{
    void *_a[] = {0, (void*)&objectName, (void*)&base64Image};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void LabelRecordBuilder::AddStyledText(const QString& objectName, DYMO_Label_Framework::IStyledText* StyledText)
{
    void *_a[] = {0, (void*)&objectName, (void*)&StyledText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void LabelRecordBuilder::AddText(const QString& objectName, const QString& Text)
{
    void *_a[] = {0, (void*)&objectName, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void LabelRecordBuilder::AddTextMarkup(const QString& objectName, const QString& TextMarkup)
{
    void *_a[] = {0, (void*)&objectName, (void*)&TextMarkup};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline bool LabelRecordBuilder::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline int LabelRecordBuilder::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline mscorlib::_Type* LabelRecordBuilder::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}


inline QString ILabelSetBuilder::xml() const
{
    QVariant qax_result = property("xml");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::ILabelRecordBuilder* ILabelSetBuilder::AddRecord()
{
    DYMO_Label_Framework::ILabelRecordBuilder* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabelRecordBuilder*>("ILabelRecordBuilder*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::ILabelRecordBuilder>("ILabelRecordBuilder", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline QString LabelSetBuilder::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString LabelSetBuilder::xml() const
{
    QVariant qax_result = property("xml");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::ILabelRecordBuilder* LabelSetBuilder::AddRecord()
{
    DYMO_Label_Framework::ILabelRecordBuilder* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabelRecordBuilder*>("ILabelRecordBuilder*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::ILabelRecordBuilder>("ILabelRecordBuilder", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool LabelSetBuilder::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int LabelSetBuilder::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline mscorlib::_Type* LabelSetBuilder::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}


inline int IStringList::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IStringList::Item(int index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline int StringList::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString StringList::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool StringList::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline stdole::IEnumVARIANT* StringList::GetEnumerator()
{
    stdole::IEnumVARIANT* qax_result = 0;
#ifdef QAX_DUMPCPP_STDOLE_H
    qRegisterMetaType<stdole::IEnumVARIANT*>("stdole::IEnumVARIANT*", &qax_result);
    qRegisterMetaType<stdole::IEnumVARIANT>("stdole::IEnumVARIANT", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int StringList::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline mscorlib::_Type* StringList::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline QString StringList::Item(int index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}


inline int ILabelObjects::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline DYMO_Label_Framework::ILabelObject* ILabelObjects::GetObjectByIndex(int index)
{
    DYMO_Label_Framework::ILabelObject* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject*>("ILabelObject*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject>("ILabelObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline DYMO_Label_Framework::ILabelObject* ILabelObjects::GetObjectByName(const QString& objectName)
{
    DYMO_Label_Framework::ILabelObject* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject*>("ILabelObject*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject>("ILabelObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&objectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline DYMO_Label_Framework::ILabelObject* ILabelObjects::Item(int index)
{
    DYMO_Label_Framework::ILabelObject* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject*>("ILabelObject*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject>("ILabelObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline int LabelObjects::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString LabelObjects::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool LabelObjects::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline stdole::IEnumVARIANT* LabelObjects::GetEnumerator()
{
    stdole::IEnumVARIANT* qax_result = 0;
#ifdef QAX_DUMPCPP_STDOLE_H
    qRegisterMetaType<stdole::IEnumVARIANT*>("stdole::IEnumVARIANT*", &qax_result);
    qRegisterMetaType<stdole::IEnumVARIANT>("stdole::IEnumVARIANT", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int LabelObjects::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline DYMO_Label_Framework::ILabelObject* LabelObjects::GetObjectByIndex(int index)
{
    DYMO_Label_Framework::ILabelObject* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject*>("ILabelObject*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject>("ILabelObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline DYMO_Label_Framework::ILabelObject* LabelObjects::GetObjectByName(const QString& objectName)
{
    DYMO_Label_Framework::ILabelObject* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject*>("ILabelObject*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject>("ILabelObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&objectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline mscorlib::_Type* LabelObjects::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline DYMO_Label_Framework::ILabelObject* LabelObjects::Item(int index)
{
    DYMO_Label_Framework::ILabelObject* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject*>("ILabelObject*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject>("ILabelObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}


inline bool ITapePrinter::IsAutoCutSupported() const
{
    QVariant qax_result = property("IsAutoCutSupported");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}


inline bool TapePrinter::IsAutoCutSupported() const
{
    QVariant qax_result = property("IsAutoCutSupported");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool TapePrinter::IsConnected() const
{
    QVariant qax_result = property("IsConnected");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool TapePrinter::IsLocal() const
{
    QVariant qax_result = property("IsLocal");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString TapePrinter::ModelName() const
{
    QVariant qax_result = property("ModelName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString TapePrinter::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString TapePrinter::PrinterType() const
{
    QVariant qax_result = property("PrinterType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString TapePrinter::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::IPrintJob* TapePrinter::CreatePrintJob(DYMO_Label_Framework::IPrintParams* printParams)
{
    DYMO_Label_Framework::IPrintJob* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IPrintJob*>("IPrintJob*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IPrintJob>("IPrintJob", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&printParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool TapePrinter::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int TapePrinter::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline mscorlib::_Type* TapePrinter::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}


inline DYMO_Label_Framework::IColor* IImageObject::BorderColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("BorderColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void IImageObject::SetBorderColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("BorderColor", QVariant(typeId, &value));
}

inline double IImageObject::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IImageObject::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline DYMO_Label_Framework::HorizontalAlignment IImageObject::HorizontalAlignment() const
{
    QVariant qax_result = property("HorizontalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::HorizontalAlignment*)qax_result.constData();
}
inline void IImageObject::SetHorizontalAlignment(DYMO_Label_Framework::HorizontalAlignment value){ setProperty("HorizontalAlignment", QVariant(value)); }

inline QByteArray IImageObject::ImagePngData() const
{
    QVariant qax_result = property("ImagePngData");
    Q_ASSERT(qax_result.isValid());
    return *(QByteArray*)qax_result.constData();
}
inline void IImageObject::SetImagePngData(const QByteArray& value){ setProperty("ImagePngData", QVariant(value)); }

inline QString IImageObject::ImagePngDataBase64() const
{
    QVariant qax_result = property("ImagePngDataBase64");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IImageObject::SetImagePngDataBase64(const QString& value){ setProperty("ImagePngDataBase64", QVariant(value)); }

inline DYMO_Label_Framework::ObjectRotation IImageObject::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ObjectRotation*)qax_result.constData();
}
inline void IImageObject::SetRotation(DYMO_Label_Framework::ObjectRotation value){ setProperty("Rotation", QVariant(value)); }

inline DYMO_Label_Framework::ImageScaleMode IImageObject::ScaleMode() const
{
    QVariant qax_result = property("ScaleMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ImageScaleMode*)qax_result.constData();
}
inline void IImageObject::SetScaleMode(DYMO_Label_Framework::ImageScaleMode value){ setProperty("ScaleMode", QVariant(value)); }

inline DYMO_Label_Framework::VerticalAlignment IImageObject::VerticalAlignment() const
{
    QVariant qax_result = property("VerticalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::VerticalAlignment*)qax_result.constData();
}
inline void IImageObject::SetVerticalAlignment(DYMO_Label_Framework::VerticalAlignment value){ setProperty("VerticalAlignment", QVariant(value)); }

inline void IImageObject::LoadFromFile(const QString& fileName)
{
    void *_a[] = {0, (void*)&fileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IImageObject::LoadFromUri(const QString& uri)
{
    void *_a[] = {0, (void*)&uri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline DYMO_Label_Framework::IColor* ImageObject::BorderColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("BorderColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void ImageObject::SetBorderColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("BorderColor", QVariant(typeId, &value));
}

inline double ImageObject::BorderWidth() const
{
    QVariant qax_result = property("BorderWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ImageObject::SetBorderWidth(double value){ setProperty("BorderWidth", QVariant(value)); }

inline DYMO_Label_Framework::HorizontalAlignment ImageObject::HorizontalAlignment() const
{
    QVariant qax_result = property("HorizontalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::HorizontalAlignment*)qax_result.constData();
}
inline void ImageObject::SetHorizontalAlignment(DYMO_Label_Framework::HorizontalAlignment value){ setProperty("HorizontalAlignment", QVariant(value)); }

inline QByteArray ImageObject::ImagePngData() const
{
    QVariant qax_result = property("ImagePngData");
    Q_ASSERT(qax_result.isValid());
    return *(QByteArray*)qax_result.constData();
}
inline void ImageObject::SetImagePngData(const QByteArray& value){ setProperty("ImagePngData", QVariant(value)); }

inline QString ImageObject::ImagePngDataBase64() const
{
    QVariant qax_result = property("ImagePngDataBase64");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ImageObject::SetImagePngDataBase64(const QString& value){ setProperty("ImagePngDataBase64", QVariant(value)); }

inline QString ImageObject::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ImageObject::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QString ImageObject::ObjectType() const
{
    QVariant qax_result = property("ObjectType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::ObjectRotation ImageObject::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ObjectRotation*)qax_result.constData();
}
inline void ImageObject::SetRotation(DYMO_Label_Framework::ObjectRotation value){ setProperty("Rotation", QVariant(value)); }

inline DYMO_Label_Framework::ImageScaleMode ImageObject::ScaleMode() const
{
    QVariant qax_result = property("ScaleMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ImageScaleMode*)qax_result.constData();
}
inline void ImageObject::SetScaleMode(DYMO_Label_Framework::ImageScaleMode value){ setProperty("ScaleMode", QVariant(value)); }

inline QString ImageObject::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::VerticalAlignment ImageObject::VerticalAlignment() const
{
    QVariant qax_result = property("VerticalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::VerticalAlignment*)qax_result.constData();
}
inline void ImageObject::SetVerticalAlignment(DYMO_Label_Framework::VerticalAlignment value){ setProperty("VerticalAlignment", QVariant(value)); }

inline bool ImageObject::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int ImageObject::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* ImageObject::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void ImageObject::LoadFromFile(const QString& fileName)
{
    void *_a[] = {0, (void*)&fileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void ImageObject::LoadFromUri(const QString& uri)
{
    void *_a[] = {0, (void*)&uri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline DYMO_Label_Framework::IColor* ICounterObject::BackgroundColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("BackgroundColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void ICounterObject::SetBackgroundColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("BackgroundColor", QVariant(typeId, &value));
}

inline int ICounterObject::Current() const
{
    QVariant qax_result = property("Current");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline DYMO_Label_Framework::TextFitMode ICounterObject::FitMode() const
{
    QVariant qax_result = property("FitMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextFitMode*)qax_result.constData();
}
inline void ICounterObject::SetFitMode(DYMO_Label_Framework::TextFitMode value){ setProperty("FitMode", QVariant(value)); }

inline DYMO_Label_Framework::IFontInfo* ICounterObject::Font() const
{
    DYMO_Label_Framework::IFontInfo* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("IFontInfo*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo>("IFontInfo", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IFontInfo**)qax_result.constData();
}
inline void ICounterObject::SetFont(DYMO_Label_Framework::IFontInfo* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("DYMO_Label_Framework::IFontInfo*", &value);
    setProperty("Font", QVariant(typeId, &value));
}

inline int ICounterObject::FormatWidth() const
{
    QVariant qax_result = property("FormatWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ICounterObject::SetFormatWidth(int value){ setProperty("FormatWidth", QVariant(value)); }

inline DYMO_Label_Framework::TextAlignment ICounterObject::HorizontalAlignment() const
{
    QVariant qax_result = property("HorizontalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextAlignment*)qax_result.constData();
}
inline void ICounterObject::SetHorizontalAlignment(DYMO_Label_Framework::TextAlignment value){ setProperty("HorizontalAlignment", QVariant(value)); }

inline bool ICounterObject::IncludeLeadingZeros() const
{
    QVariant qax_result = property("IncludeLeadingZeros");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ICounterObject::SetIncludeLeadingZeros(bool value){ setProperty("IncludeLeadingZeros", QVariant(value)); }

inline int ICounterObject::Increment() const
{
    QVariant qax_result = property("Increment");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ICounterObject::SetIncrement(int value){ setProperty("Increment", QVariant(value)); }

inline bool ICounterObject::IsMirrored() const
{
    QVariant qax_result = property("IsMirrored");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ICounterObject::SetIsMirrored(bool value){ setProperty("IsMirrored", QVariant(value)); }

inline QString ICounterObject::PostText() const
{
    QVariant qax_result = property("PostText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ICounterObject::SetPostText(const QString& value){ setProperty("PostText", QVariant(value)); }

inline QString ICounterObject::PreText() const
{
    QVariant qax_result = property("PreText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ICounterObject::SetPreText(const QString& value){ setProperty("PreText", QVariant(value)); }

inline DYMO_Label_Framework::ObjectRotation ICounterObject::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ObjectRotation*)qax_result.constData();
}
inline void ICounterObject::SetRotation(DYMO_Label_Framework::ObjectRotation value){ setProperty("Rotation", QVariant(value)); }

inline int ICounterObject::Start() const
{
    QVariant qax_result = property("Start");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ICounterObject::SetStart(int value){ setProperty("Start", QVariant(value)); }

inline QString ICounterObject::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::IColor* ICounterObject::TextColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("TextColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void ICounterObject::SetTextColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("TextColor", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::TextVerticalAlignment ICounterObject::VerticalAlignment() const
{
    QVariant qax_result = property("VerticalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextVerticalAlignment*)qax_result.constData();
}
inline void ICounterObject::SetVerticalAlignment(DYMO_Label_Framework::TextVerticalAlignment value){ setProperty("VerticalAlignment", QVariant(value)); }

inline bool ICounterObject::Verticalized() const
{
    QVariant qax_result = property("Verticalized");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ICounterObject::SetVerticalized(bool value){ setProperty("Verticalized", QVariant(value)); }


inline DYMO_Label_Framework::IColor* CounterObject::BackgroundColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("BackgroundColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void CounterObject::SetBackgroundColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("BackgroundColor", QVariant(typeId, &value));
}

inline int CounterObject::Current() const
{
    QVariant qax_result = property("Current");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline DYMO_Label_Framework::TextFitMode CounterObject::FitMode() const
{
    QVariant qax_result = property("FitMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextFitMode*)qax_result.constData();
}
inline void CounterObject::SetFitMode(DYMO_Label_Framework::TextFitMode value){ setProperty("FitMode", QVariant(value)); }

inline DYMO_Label_Framework::IFontInfo* CounterObject::Font() const
{
    DYMO_Label_Framework::IFontInfo* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("IFontInfo*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo>("IFontInfo", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IFontInfo**)qax_result.constData();
}
inline void CounterObject::SetFont(DYMO_Label_Framework::IFontInfo* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("DYMO_Label_Framework::IFontInfo*", &value);
    setProperty("Font", QVariant(typeId, &value));
}

inline int CounterObject::FormatWidth() const
{
    QVariant qax_result = property("FormatWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CounterObject::SetFormatWidth(int value){ setProperty("FormatWidth", QVariant(value)); }

inline DYMO_Label_Framework::TextAlignment CounterObject::HorizontalAlignment() const
{
    QVariant qax_result = property("HorizontalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextAlignment*)qax_result.constData();
}
inline void CounterObject::SetHorizontalAlignment(DYMO_Label_Framework::TextAlignment value){ setProperty("HorizontalAlignment", QVariant(value)); }

inline bool CounterObject::IncludeLeadingZeros() const
{
    QVariant qax_result = property("IncludeLeadingZeros");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void CounterObject::SetIncludeLeadingZeros(bool value){ setProperty("IncludeLeadingZeros", QVariant(value)); }

inline int CounterObject::Increment() const
{
    QVariant qax_result = property("Increment");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CounterObject::SetIncrement(int value){ setProperty("Increment", QVariant(value)); }

inline bool CounterObject::IsMirrored() const
{
    QVariant qax_result = property("IsMirrored");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void CounterObject::SetIsMirrored(bool value){ setProperty("IsMirrored", QVariant(value)); }

inline QString CounterObject::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void CounterObject::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QString CounterObject::ObjectType() const
{
    QVariant qax_result = property("ObjectType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString CounterObject::PostText() const
{
    QVariant qax_result = property("PostText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void CounterObject::SetPostText(const QString& value){ setProperty("PostText", QVariant(value)); }

inline QString CounterObject::PreText() const
{
    QVariant qax_result = property("PreText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void CounterObject::SetPreText(const QString& value){ setProperty("PreText", QVariant(value)); }

inline DYMO_Label_Framework::ObjectRotation CounterObject::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ObjectRotation*)qax_result.constData();
}
inline void CounterObject::SetRotation(DYMO_Label_Framework::ObjectRotation value){ setProperty("Rotation", QVariant(value)); }

inline int CounterObject::Start() const
{
    QVariant qax_result = property("Start");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void CounterObject::SetStart(int value){ setProperty("Start", QVariant(value)); }

inline QString CounterObject::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::IColor* CounterObject::TextColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("TextColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void CounterObject::SetTextColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("TextColor", QVariant(typeId, &value));
}

inline QString CounterObject::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::TextVerticalAlignment CounterObject::VerticalAlignment() const
{
    QVariant qax_result = property("VerticalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextVerticalAlignment*)qax_result.constData();
}
inline void CounterObject::SetVerticalAlignment(DYMO_Label_Framework::TextVerticalAlignment value){ setProperty("VerticalAlignment", QVariant(value)); }

inline bool CounterObject::Verticalized() const
{
    QVariant qax_result = property("Verticalized");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void CounterObject::SetVerticalized(bool value){ setProperty("Verticalized", QVariant(value)); }

inline bool CounterObject::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int CounterObject::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* CounterObject::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline DYMO_Label_Framework::IContinuousLabelCell* IContinuousLabel::RootCell() const
{
    DYMO_Label_Framework::IContinuousLabelCell* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabelCell*>("IContinuousLabelCell*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabelCell>("IContinuousLabelCell", qax_pointer);
    QVariant qax_result = property("RootCell");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IContinuousLabelCell**)qax_result.constData();
}

inline DYMO_Label_Framework::ContinuousLabelLengthMode IContinuousLabel::lengthMode() const
{
    QVariant qax_result = property("lengthMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ContinuousLabelLengthMode*)qax_result.constData();
}

inline DYMO_Label_Framework::IContinuousLabelCell* IContinuousLabel::CreateCell()
{
    DYMO_Label_Framework::IContinuousLabelCell* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabelCell*>("IContinuousLabelCell*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabelCell>("IContinuousLabelCell", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline double IContinuousLabel::GetFixedLength()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IContinuousLabel::SetAutoLengthMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IContinuousLabel::SetFixedLengthMode(double fixedLength)
{
    void *_a[] = {0, (void*)&fixedLength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline int ContinuousLabel::AddressObjectCount() const
{
    QVariant qax_result = property("AddressObjectCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline DYMO_Label_Framework::ILabelObjects* ContinuousLabel::LabelObjects() const
{
    DYMO_Label_Framework::ILabelObjects* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabelObjects*>("ILabelObjects*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::ILabelObjects>("ILabelObjects", qax_pointer);
    QVariant qax_result = property("LabelObjects");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ILabelObjects**)qax_result.constData();
}

inline QString ContinuousLabel::LabelType() const
{
    QVariant qax_result = property("LabelType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::IContinuousLabelCell* ContinuousLabel::RootCell() const
{
    DYMO_Label_Framework::IContinuousLabelCell* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabelCell*>("IContinuousLabelCell*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabelCell>("IContinuousLabelCell", qax_pointer);
    QVariant qax_result = property("RootCell");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IContinuousLabelCell**)qax_result.constData();
}

inline QString ContinuousLabel::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::ContinuousLabelLengthMode ContinuousLabel::lengthMode() const
{
    QVariant qax_result = property("lengthMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ContinuousLabelLengthMode*)qax_result.constData();
}

inline DYMO_Label_Framework::IContinuousLabelCell* ContinuousLabel::CreateCell()
{
    DYMO_Label_Framework::IContinuousLabelCell* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabelCell*>("IContinuousLabelCell*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IContinuousLabelCell>("IContinuousLabelCell", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool ContinuousLabel::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline double ContinuousLabel::GetFixedLength()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline int ContinuousLabel::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline DYMO_Label_Framework::ILabelObject* ContinuousLabel::GetObjectByName(const QString& objectName)
{
    DYMO_Label_Framework::ILabelObject* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject*>("ILabelObject*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::ILabelObject>("ILabelObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&objectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IStringList* ContinuousLabel::GetObjectNames()
{
    DYMO_Label_Framework::IStringList* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IStringList*>("IStringList*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IStringList>("IStringList", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QString ContinuousLabel::GetObjectText(const QString& objectName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&objectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline mscorlib::_Type* ContinuousLabel::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void ContinuousLabel::Print(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::IPrintParams* printParams)
{
    void *_a[] = {0, (void*)&Printer, (void*)&printParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void ContinuousLabel::PrintLabelSet(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::IPrintParams* printParams, const QString& labelSetXml)
{
    void *_a[] = {0, (void*)&Printer, (void*)&printParams, (void*)&labelSetXml};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline QByteArray ContinuousLabel::RenderAsPng(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::ILabelRenderParams* renderParams)
{
    QByteArray qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Printer, (void*)&renderParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline QString ContinuousLabel::RenderAsPngBase64(DYMO_Label_Framework::IPrinter* Printer, DYMO_Label_Framework::ILabelRenderParams* renderParams)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Printer, (void*)&renderParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline void ContinuousLabel::SaveToFile(const QString& fileName)
{
    void *_a[] = {0, (void*)&fileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline QString ContinuousLabel::SaveToXml()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline void ContinuousLabel::SetAddressText(int index, const QString& Text)
{
    void *_a[] = {0, (void*)&index, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void ContinuousLabel::SetAutoLengthMode()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void ContinuousLabel::SetFixedLengthMode(double fixedLength)
{
    void *_a[] = {0, (void*)&fixedLength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void ContinuousLabel::SetImagePngData(const QString& imageName, const QByteArray& pngData)
{
    void *_a[] = {0, (void*)&imageName, (void*)&pngData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void ContinuousLabel::SetImagePngDataBase64(const QString& imageName, const QString& pngData)
{
    void *_a[] = {0, (void*)&imageName, (void*)&pngData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void ContinuousLabel::SetImageUri(const QString& imageName, const QString& uri)
{
    void *_a[] = {0, (void*)&imageName, (void*)&uri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void ContinuousLabel::SetObjectText(const QString& objectName, const QString& Text)
{
    void *_a[] = {0, (void*)&objectName, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void ContinuousLabel::SetPostnetBarcodePosition(int index, DYMO_Label_Framework::PostnetBarcodePosition position)
{
    void *_a[] = {0, (void*)&index, (void*)&position};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}


inline DYMO_Label_Framework::IFontInfo* IStyledTextBlock::Font() const
{
    DYMO_Label_Framework::IFontInfo* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("IFontInfo*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo>("IFontInfo", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IFontInfo**)qax_result.constData();
}

inline QString IStyledTextBlock::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::IColor* IStyledTextBlock::TextColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("TextColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}


inline DYMO_Label_Framework::IFontInfo* StyledTextBlock::Font() const
{
    DYMO_Label_Framework::IFontInfo* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("IFontInfo*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo>("IFontInfo", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IFontInfo**)qax_result.constData();
}

inline QString StyledTextBlock::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::IColor* StyledTextBlock::TextColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("TextColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}

inline QString StyledTextBlock::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool StyledTextBlock::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int StyledTextBlock::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* StyledTextBlock::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline int IStyledText::BlockCount() const
{
    QVariant qax_result = property("BlockCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IStyledText::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::IStyledTextBlock* IStyledText::Item(int index)
{
    DYMO_Label_Framework::IStyledTextBlock* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IStyledTextBlock*>("IStyledTextBlock*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IStyledTextBlock>("IStyledTextBlock", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline void IStyledTextBuilder::Append(const QString& Text, DYMO_Label_Framework::IFontInfo* Font, DYMO_Label_Framework::IColor* TextColor)
{
    void *_a[] = {0, (void*)&Text, (void*)&Font, (void*)&TextColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IStyledTextBuilder::AppendBlock(DYMO_Label_Framework::IStyledTextBlock* block)
{
    void *_a[] = {0, (void*)&block};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline DYMO_Label_Framework::IStyledText* IStyledTextBuilder::ToStyledText()
{
    DYMO_Label_Framework::IStyledText* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IStyledText*>("IStyledText*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IStyledText>("IStyledText", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline QString StyledTextBuilder::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void StyledTextBuilder::Append(const QString& Text, DYMO_Label_Framework::IFontInfo* Font, DYMO_Label_Framework::IColor* TextColor)
{
    void *_a[] = {0, (void*)&Text, (void*)&Font, (void*)&TextColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void StyledTextBuilder::AppendBlock(DYMO_Label_Framework::IStyledTextBlock* block)
{
    void *_a[] = {0, (void*)&block};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline bool StyledTextBuilder::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline int StyledTextBuilder::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline mscorlib::_Type* StyledTextBuilder::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IStyledText* StyledTextBuilder::ToStyledText()
{
    DYMO_Label_Framework::IStyledText* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IStyledText*>("IStyledText*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IStyledText>("IStyledText", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}


inline int StyledText::BlockCount() const
{
    QVariant qax_result = property("BlockCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString StyledText::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString StyledText::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool StyledText::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline stdole::IEnumVARIANT* StyledText::GetEnumerator()
{
    stdole::IEnumVARIANT* qax_result = 0;
#ifdef QAX_DUMPCPP_STDOLE_H
    qRegisterMetaType<stdole::IEnumVARIANT*>("stdole::IEnumVARIANT*", &qax_result);
    qRegisterMetaType<stdole::IEnumVARIANT>("stdole::IEnumVARIANT", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int StyledText::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline mscorlib::_Type* StyledText::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline DYMO_Label_Framework::IStyledTextBlock* StyledText::Item(int index)
{
    DYMO_Label_Framework::IStyledTextBlock* qax_result = 0;
    qRegisterMetaType<DYMO_Label_Framework::IStyledTextBlock*>("IStyledTextBlock*", &qax_result);
    qRegisterMetaType<DYMO_Label_Framework::IStyledTextBlock>("IStyledTextBlock", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}


inline DYMO_Label_Framework::IColor* IDateTimeObject::BackgroundColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("BackgroundColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void IDateTimeObject::SetBackgroundColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("BackgroundColor", QVariant(typeId, &value));
}

inline QString IDateTimeObject::Culture() const
{
    QVariant qax_result = property("Culture");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IDateTimeObject::SetCulture(const QString& value){ setProperty("Culture", QVariant(value)); }

inline DYMO_Label_Framework::DateFormat IDateTimeObject::DateFormat() const
{
    QVariant qax_result = property("DateFormat");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::DateFormat*)qax_result.constData();
}
inline void IDateTimeObject::SetDateFormat(DYMO_Label_Framework::DateFormat value){ setProperty("DateFormat", QVariant(value)); }

inline DYMO_Label_Framework::TextFitMode IDateTimeObject::FitMode() const
{
    QVariant qax_result = property("FitMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextFitMode*)qax_result.constData();
}
inline void IDateTimeObject::SetFitMode(DYMO_Label_Framework::TextFitMode value){ setProperty("FitMode", QVariant(value)); }

inline DYMO_Label_Framework::IFontInfo* IDateTimeObject::Font() const
{
    DYMO_Label_Framework::IFontInfo* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("IFontInfo*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo>("IFontInfo", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IFontInfo**)qax_result.constData();
}
inline void IDateTimeObject::SetFont(DYMO_Label_Framework::IFontInfo* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("DYMO_Label_Framework::IFontInfo*", &value);
    setProperty("Font", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::TextAlignment IDateTimeObject::HorizontalAlignment() const
{
    QVariant qax_result = property("HorizontalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextAlignment*)qax_result.constData();
}
inline void IDateTimeObject::SetHorizontalAlignment(DYMO_Label_Framework::TextAlignment value){ setProperty("HorizontalAlignment", QVariant(value)); }

inline bool IDateTimeObject::IncludeTime() const
{
    QVariant qax_result = property("IncludeTime");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IDateTimeObject::SetIncludeTime(bool value){ setProperty("IncludeTime", QVariant(value)); }

inline bool IDateTimeObject::IsMirrored() const
{
    QVariant qax_result = property("IsMirrored");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IDateTimeObject::SetIsMirrored(bool value){ setProperty("IsMirrored", QVariant(value)); }

inline QString IDateTimeObject::PostText() const
{
    QVariant qax_result = property("PostText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IDateTimeObject::SetPostText(const QString& value){ setProperty("PostText", QVariant(value)); }

inline QString IDateTimeObject::PreText() const
{
    QVariant qax_result = property("PreText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IDateTimeObject::SetPreText(const QString& value){ setProperty("PreText", QVariant(value)); }

inline DYMO_Label_Framework::ObjectRotation IDateTimeObject::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ObjectRotation*)qax_result.constData();
}
inline void IDateTimeObject::SetRotation(DYMO_Label_Framework::ObjectRotation value){ setProperty("Rotation", QVariant(value)); }

inline QString IDateTimeObject::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::IColor* IDateTimeObject::TextColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("TextColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void IDateTimeObject::SetTextColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("TextColor", QVariant(typeId, &value));
}

inline bool IDateTimeObject::Use24HourFormat() const
{
    QVariant qax_result = property("Use24HourFormat");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IDateTimeObject::SetUse24HourFormat(bool value){ setProperty("Use24HourFormat", QVariant(value)); }

inline DYMO_Label_Framework::TextVerticalAlignment IDateTimeObject::VerticalAlignment() const
{
    QVariant qax_result = property("VerticalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextVerticalAlignment*)qax_result.constData();
}
inline void IDateTimeObject::SetVerticalAlignment(DYMO_Label_Framework::TextVerticalAlignment value){ setProperty("VerticalAlignment", QVariant(value)); }

inline bool IDateTimeObject::Verticalized() const
{
    QVariant qax_result = property("Verticalized");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IDateTimeObject::SetVerticalized(bool value){ setProperty("Verticalized", QVariant(value)); }


inline DYMO_Label_Framework::IColor* DateTimeObject::BackgroundColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("BackgroundColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void DateTimeObject::SetBackgroundColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("BackgroundColor", QVariant(typeId, &value));
}

inline QString DateTimeObject::Culture() const
{
    QVariant qax_result = property("Culture");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void DateTimeObject::SetCulture(const QString& value){ setProperty("Culture", QVariant(value)); }

inline DYMO_Label_Framework::DateFormat DateTimeObject::DateFormat() const
{
    QVariant qax_result = property("DateFormat");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::DateFormat*)qax_result.constData();
}
inline void DateTimeObject::SetDateFormat(DYMO_Label_Framework::DateFormat value){ setProperty("DateFormat", QVariant(value)); }

inline DYMO_Label_Framework::TextFitMode DateTimeObject::FitMode() const
{
    QVariant qax_result = property("FitMode");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextFitMode*)qax_result.constData();
}
inline void DateTimeObject::SetFitMode(DYMO_Label_Framework::TextFitMode value){ setProperty("FitMode", QVariant(value)); }

inline DYMO_Label_Framework::IFontInfo* DateTimeObject::Font() const
{
    DYMO_Label_Framework::IFontInfo* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("IFontInfo*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IFontInfo>("IFontInfo", qax_pointer);
    QVariant qax_result = property("Font");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IFontInfo**)qax_result.constData();
}
inline void DateTimeObject::SetFont(DYMO_Label_Framework::IFontInfo* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IFontInfo*>("DYMO_Label_Framework::IFontInfo*", &value);
    setProperty("Font", QVariant(typeId, &value));
}

inline DYMO_Label_Framework::TextAlignment DateTimeObject::HorizontalAlignment() const
{
    QVariant qax_result = property("HorizontalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextAlignment*)qax_result.constData();
}
inline void DateTimeObject::SetHorizontalAlignment(DYMO_Label_Framework::TextAlignment value){ setProperty("HorizontalAlignment", QVariant(value)); }

inline bool DateTimeObject::IncludeTime() const
{
    QVariant qax_result = property("IncludeTime");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void DateTimeObject::SetIncludeTime(bool value){ setProperty("IncludeTime", QVariant(value)); }

inline bool DateTimeObject::IsMirrored() const
{
    QVariant qax_result = property("IsMirrored");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void DateTimeObject::SetIsMirrored(bool value){ setProperty("IsMirrored", QVariant(value)); }

inline QString DateTimeObject::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void DateTimeObject::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QString DateTimeObject::ObjectType() const
{
    QVariant qax_result = property("ObjectType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString DateTimeObject::PostText() const
{
    QVariant qax_result = property("PostText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void DateTimeObject::SetPostText(const QString& value){ setProperty("PostText", QVariant(value)); }

inline QString DateTimeObject::PreText() const
{
    QVariant qax_result = property("PreText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void DateTimeObject::SetPreText(const QString& value){ setProperty("PreText", QVariant(value)); }

inline DYMO_Label_Framework::ObjectRotation DateTimeObject::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::ObjectRotation*)qax_result.constData();
}
inline void DateTimeObject::SetRotation(DYMO_Label_Framework::ObjectRotation value){ setProperty("Rotation", QVariant(value)); }

inline QString DateTimeObject::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline DYMO_Label_Framework::IColor* DateTimeObject::TextColor() const
{
    DYMO_Label_Framework::IColor* qax_pointer = 0;
    qRegisterMetaType<DYMO_Label_Framework::IColor*>("IColor*", &qax_pointer);
    qRegisterMetaType<DYMO_Label_Framework::IColor>("IColor", qax_pointer);
    QVariant qax_result = property("TextColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::IColor**)qax_result.constData();
}
inline void DateTimeObject::SetTextColor(DYMO_Label_Framework::IColor* value){
    int typeId = qRegisterMetaType<DYMO_Label_Framework::IColor*>("DYMO_Label_Framework::IColor*", &value);
    setProperty("TextColor", QVariant(typeId, &value));
}

inline QString DateTimeObject::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool DateTimeObject::Use24HourFormat() const
{
    QVariant qax_result = property("Use24HourFormat");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void DateTimeObject::SetUse24HourFormat(bool value){ setProperty("Use24HourFormat", QVariant(value)); }

inline DYMO_Label_Framework::TextVerticalAlignment DateTimeObject::VerticalAlignment() const
{
    QVariant qax_result = property("VerticalAlignment");
    Q_ASSERT(qax_result.isValid());
    return *(DYMO_Label_Framework::TextVerticalAlignment*)qax_result.constData();
}
inline void DateTimeObject::SetVerticalAlignment(DYMO_Label_Framework::TextVerticalAlignment value){ setProperty("VerticalAlignment", QVariant(value)); }

inline bool DateTimeObject::Verticalized() const
{
    QVariant qax_result = property("Verticalized");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void DateTimeObject::SetVerticalized(bool value){ setProperty("Verticalized", QVariant(value)); }

inline bool DateTimeObject::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int DateTimeObject::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline mscorlib::_Type* DateTimeObject::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}





































#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ILabelObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ILabelObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ILabelObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ILabelObject*>(t)->DYMO_Label_Framework::ILabelObject::~ILabelObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ILabelObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ILabelObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ILabelObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IBarcodeObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IBarcodeObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IBarcodeObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IBarcodeObject*>(t)->DYMO_Label_Framework::IBarcodeObject::~IBarcodeObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IBarcodeObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IBarcodeObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IBarcodeObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::LabelObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::LabelObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::LabelObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::LabelObject*>(t)->DYMO_Label_Framework::LabelObject::~LabelObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::LabelObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::LabelObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::LabelObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::BarcodeObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::BarcodeObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::BarcodeObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::BarcodeObject*>(t)->DYMO_Label_Framework::BarcodeObject::~BarcodeObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::BarcodeObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::BarcodeObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::BarcodeObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IAddressObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IAddressObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IAddressObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IAddressObject*>(t)->DYMO_Label_Framework::IAddressObject::~IAddressObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IAddressObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IAddressObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IAddressObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::AddressObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::AddressObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::AddressObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::AddressObject*>(t)->DYMO_Label_Framework::AddressObject::~AddressObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::AddressObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::AddressObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::AddressObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IRect, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IRect*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IRect();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IRect*>(t)->DYMO_Label_Framework::IRect::~IRect();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IRect;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IRect*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IRect*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::Rect, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::Rect*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::Rect();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::Rect*>(t)->DYMO_Label_Framework::Rect::~Rect();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::Rect;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::Rect*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::Rect*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ITextObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ITextObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ITextObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ITextObject*>(t)->DYMO_Label_Framework::ITextObject::~ITextObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ITextObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ITextObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ITextObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::TextObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::TextObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::TextObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::TextObject*>(t)->DYMO_Label_Framework::TextObject::~TextObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::TextObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::TextObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::TextObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IPrinters, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IPrinters*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IPrinters();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IPrinters*>(t)->DYMO_Label_Framework::IPrinters::~IPrinters();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IPrinters;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IPrinters*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IPrinters*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IPrinter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IPrinter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IPrinter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IPrinter*>(t)->DYMO_Label_Framework::IPrinter::~IPrinter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IPrinter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IPrinter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IPrinter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IPrintJob, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IPrintJob*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IPrintJob();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IPrintJob*>(t)->DYMO_Label_Framework::IPrintJob::~IPrintJob();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IPrintJob;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IPrintJob*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IPrintJob*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::Printer, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::Printer*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::Printer();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::Printer*>(t)->DYMO_Label_Framework::Printer::~Printer();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::Printer;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::Printer*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::Printer*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::PrintJob, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::PrintJob*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::PrintJob();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::PrintJob*>(t)->DYMO_Label_Framework::PrintJob::~PrintJob();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::PrintJob;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::PrintJob*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::PrintJob*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::Printers, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::Printers*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::Printers();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::Printers*>(t)->DYMO_Label_Framework::Printers::~Printers();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::Printers;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::Printers*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::Printers*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ICircularTextObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ICircularTextObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ICircularTextObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ICircularTextObject*>(t)->DYMO_Label_Framework::ICircularTextObject::~ICircularTextObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ICircularTextObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ICircularTextObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ICircularTextObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::CircularTextObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::CircularTextObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::CircularTextObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::CircularTextObject*>(t)->DYMO_Label_Framework::CircularTextObject::~CircularTextObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::CircularTextObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::CircularTextObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::CircularTextObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IPrintParams, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IPrintParams*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IPrintParams();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IPrintParams*>(t)->DYMO_Label_Framework::IPrintParams::~IPrintParams();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IPrintParams;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IPrintParams*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IPrintParams*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ILabelWriterPrintParams, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ILabelWriterPrintParams*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ILabelWriterPrintParams();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ILabelWriterPrintParams*>(t)->DYMO_Label_Framework::ILabelWriterPrintParams::~ILabelWriterPrintParams();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ILabelWriterPrintParams;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ILabelWriterPrintParams*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ILabelWriterPrintParams*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::LabelWriterPrintParams, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::LabelWriterPrintParams*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::LabelWriterPrintParams();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::LabelWriterPrintParams*>(t)->DYMO_Label_Framework::LabelWriterPrintParams::~LabelWriterPrintParams();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::LabelWriterPrintParams;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::LabelWriterPrintParams*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::LabelWriterPrintParams*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ITapePrintParams, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ITapePrintParams*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ITapePrintParams();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ITapePrintParams*>(t)->DYMO_Label_Framework::ITapePrintParams::~ITapePrintParams();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ITapePrintParams;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ITapePrintParams*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ITapePrintParams*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::TapePrintParams, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::TapePrintParams*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::TapePrintParams();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::TapePrintParams*>(t)->DYMO_Label_Framework::TapePrintParams::~TapePrintParams();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::TapePrintParams;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::TapePrintParams*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::TapePrintParams*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ILabelRenderParams, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ILabelRenderParams*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ILabelRenderParams();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ILabelRenderParams*>(t)->DYMO_Label_Framework::ILabelRenderParams::~ILabelRenderParams();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ILabelRenderParams;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ILabelRenderParams*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ILabelRenderParams*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::LabelRenderParams, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::LabelRenderParams*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::LabelRenderParams();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::LabelRenderParams*>(t)->DYMO_Label_Framework::LabelRenderParams::~LabelRenderParams();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::LabelRenderParams;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::LabelRenderParams*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::LabelRenderParams*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ILabelWriterPrinter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ILabelWriterPrinter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ILabelWriterPrinter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ILabelWriterPrinter*>(t)->DYMO_Label_Framework::ILabelWriterPrinter::~ILabelWriterPrinter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ILabelWriterPrinter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ILabelWriterPrinter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ILabelWriterPrinter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::LabelWriterPrinter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::LabelWriterPrinter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::LabelWriterPrinter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::LabelWriterPrinter*>(t)->DYMO_Label_Framework::LabelWriterPrinter::~LabelWriterPrinter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::LabelWriterPrinter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::LabelWriterPrinter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::LabelWriterPrinter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ILabel, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ILabel*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ILabel();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ILabel*>(t)->DYMO_Label_Framework::ILabel::~ILabel();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ILabel;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ILabel*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ILabel*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IDieCutLabel, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IDieCutLabel*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IDieCutLabel();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IDieCutLabel*>(t)->DYMO_Label_Framework::IDieCutLabel::~IDieCutLabel();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IDieCutLabel;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IDieCutLabel*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IDieCutLabel*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::DieCutLabel, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::DieCutLabel*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::DieCutLabel();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::DieCutLabel*>(t)->DYMO_Label_Framework::DieCutLabel::~DieCutLabel();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::DieCutLabel;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::DieCutLabel*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::DieCutLabel*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IWebProxy, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IWebProxy*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IWebProxy();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IWebProxy*>(t)->DYMO_Label_Framework::IWebProxy::~IWebProxy();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IWebProxy;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IWebProxy*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IWebProxy*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::WebProxy, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::WebProxy*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::WebProxy();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::WebProxy*>(t)->DYMO_Label_Framework::WebProxy::~WebProxy();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::WebProxy;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::WebProxy*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::WebProxy*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IFramework, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IFramework*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IFramework();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IFramework*>(t)->DYMO_Label_Framework::IFramework::~IFramework();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IFramework;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IFramework*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IFramework*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::Framework, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::Framework*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::Framework();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::Framework*>(t)->DYMO_Label_Framework::Framework::~Framework();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::Framework;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::Framework*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::Framework*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IColor, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IColor*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IColor();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IColor*>(t)->DYMO_Label_Framework::IColor::~IColor();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IColor;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IColor*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IColor*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::Color, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::Color*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::Color();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::Color*>(t)->DYMO_Label_Framework::Color::~Color();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::Color;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::Color*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::Color*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IContinuousLabelCellList, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IContinuousLabelCellList*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IContinuousLabelCellList();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IContinuousLabelCellList*>(t)->DYMO_Label_Framework::IContinuousLabelCellList::~IContinuousLabelCellList();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IContinuousLabelCellList;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IContinuousLabelCellList*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IContinuousLabelCellList*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ContinuousLabelCellList, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ContinuousLabelCellList*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ContinuousLabelCellList();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ContinuousLabelCellList*>(t)->DYMO_Label_Framework::ContinuousLabelCellList::~ContinuousLabelCellList();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ContinuousLabelCellList;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ContinuousLabelCellList*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ContinuousLabelCellList*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IContinuousLabelCell, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IContinuousLabelCell*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IContinuousLabelCell();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IContinuousLabelCell*>(t)->DYMO_Label_Framework::IContinuousLabelCell::~IContinuousLabelCell();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IContinuousLabelCell;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IContinuousLabelCell*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IContinuousLabelCell*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ContinuousLabelCell, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ContinuousLabelCell*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ContinuousLabelCell();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ContinuousLabelCell*>(t)->DYMO_Label_Framework::ContinuousLabelCell::~ContinuousLabelCell();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ContinuousLabelCell;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ContinuousLabelCell*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ContinuousLabelCell*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IThickness, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IThickness*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IThickness();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IThickness*>(t)->DYMO_Label_Framework::IThickness::~IThickness();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IThickness;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IThickness*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IThickness*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::Thickness, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::Thickness*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::Thickness();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::Thickness*>(t)->DYMO_Label_Framework::Thickness::~Thickness();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::Thickness;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::Thickness*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::Thickness*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IFontInfo, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IFontInfo*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IFontInfo();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IFontInfo*>(t)->DYMO_Label_Framework::IFontInfo::~IFontInfo();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IFontInfo;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IFontInfo*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IFontInfo*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::FontInfo, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::FontInfo*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::FontInfo();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::FontInfo*>(t)->DYMO_Label_Framework::FontInfo::~FontInfo();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::FontInfo;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::FontInfo*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::FontInfo*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IShapeObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IShapeObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IShapeObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IShapeObject*>(t)->DYMO_Label_Framework::IShapeObject::~IShapeObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IShapeObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IShapeObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IShapeObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ShapeObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ShapeObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ShapeObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ShapeObject*>(t)->DYMO_Label_Framework::ShapeObject::~ShapeObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ShapeObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ShapeObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ShapeObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ILabelRecordBuilder, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ILabelRecordBuilder*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ILabelRecordBuilder();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ILabelRecordBuilder*>(t)->DYMO_Label_Framework::ILabelRecordBuilder::~ILabelRecordBuilder();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ILabelRecordBuilder;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ILabelRecordBuilder*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ILabelRecordBuilder*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::LabelRecordBuilder, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::LabelRecordBuilder*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::LabelRecordBuilder();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::LabelRecordBuilder*>(t)->DYMO_Label_Framework::LabelRecordBuilder::~LabelRecordBuilder();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::LabelRecordBuilder;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::LabelRecordBuilder*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::LabelRecordBuilder*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ILabelSetBuilder, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ILabelSetBuilder*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ILabelSetBuilder();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ILabelSetBuilder*>(t)->DYMO_Label_Framework::ILabelSetBuilder::~ILabelSetBuilder();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ILabelSetBuilder;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ILabelSetBuilder*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ILabelSetBuilder*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::LabelSetBuilder, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::LabelSetBuilder*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::LabelSetBuilder();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::LabelSetBuilder*>(t)->DYMO_Label_Framework::LabelSetBuilder::~LabelSetBuilder();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::LabelSetBuilder;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::LabelSetBuilder*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::LabelSetBuilder*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IStringList, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IStringList*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IStringList();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IStringList*>(t)->DYMO_Label_Framework::IStringList::~IStringList();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IStringList;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IStringList*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IStringList*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::StringList, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::StringList*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::StringList();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::StringList*>(t)->DYMO_Label_Framework::StringList::~StringList();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::StringList;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::StringList*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::StringList*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ILabelObjects, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ILabelObjects*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ILabelObjects();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ILabelObjects*>(t)->DYMO_Label_Framework::ILabelObjects::~ILabelObjects();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ILabelObjects;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ILabelObjects*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ILabelObjects*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::LabelObjects, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::LabelObjects*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::LabelObjects();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::LabelObjects*>(t)->DYMO_Label_Framework::LabelObjects::~LabelObjects();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::LabelObjects;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::LabelObjects*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::LabelObjects*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ITapePrinter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ITapePrinter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ITapePrinter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ITapePrinter*>(t)->DYMO_Label_Framework::ITapePrinter::~ITapePrinter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ITapePrinter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ITapePrinter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ITapePrinter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::TapePrinter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::TapePrinter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::TapePrinter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::TapePrinter*>(t)->DYMO_Label_Framework::TapePrinter::~TapePrinter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::TapePrinter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::TapePrinter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::TapePrinter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IImageObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IImageObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IImageObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IImageObject*>(t)->DYMO_Label_Framework::IImageObject::~IImageObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IImageObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IImageObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IImageObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ImageObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ImageObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ImageObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ImageObject*>(t)->DYMO_Label_Framework::ImageObject::~ImageObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ImageObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ImageObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ImageObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ICounterObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ICounterObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ICounterObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ICounterObject*>(t)->DYMO_Label_Framework::ICounterObject::~ICounterObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ICounterObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ICounterObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ICounterObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::CounterObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::CounterObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::CounterObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::CounterObject*>(t)->DYMO_Label_Framework::CounterObject::~CounterObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::CounterObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::CounterObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::CounterObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IContinuousLabel, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IContinuousLabel*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IContinuousLabel();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IContinuousLabel*>(t)->DYMO_Label_Framework::IContinuousLabel::~IContinuousLabel();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IContinuousLabel;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IContinuousLabel*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IContinuousLabel*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::ContinuousLabel, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::ContinuousLabel*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::ContinuousLabel();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::ContinuousLabel*>(t)->DYMO_Label_Framework::ContinuousLabel::~ContinuousLabel();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::ContinuousLabel;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::ContinuousLabel*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::ContinuousLabel*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IStyledTextBlock, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IStyledTextBlock*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IStyledTextBlock();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IStyledTextBlock*>(t)->DYMO_Label_Framework::IStyledTextBlock::~IStyledTextBlock();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IStyledTextBlock;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IStyledTextBlock*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IStyledTextBlock*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::StyledTextBlock, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::StyledTextBlock*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::StyledTextBlock();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::StyledTextBlock*>(t)->DYMO_Label_Framework::StyledTextBlock::~StyledTextBlock();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::StyledTextBlock;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::StyledTextBlock*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::StyledTextBlock*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IStyledText, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IStyledText*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IStyledText();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IStyledText*>(t)->DYMO_Label_Framework::IStyledText::~IStyledText();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IStyledText;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IStyledText*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IStyledText*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IStyledTextBuilder, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IStyledTextBuilder*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IStyledTextBuilder();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IStyledTextBuilder*>(t)->DYMO_Label_Framework::IStyledTextBuilder::~IStyledTextBuilder();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IStyledTextBuilder;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IStyledTextBuilder*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IStyledTextBuilder*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::StyledTextBuilder, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::StyledTextBuilder*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::StyledTextBuilder();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::StyledTextBuilder*>(t)->DYMO_Label_Framework::StyledTextBuilder::~StyledTextBuilder();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::StyledTextBuilder;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::StyledTextBuilder*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::StyledTextBuilder*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::StyledText, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::StyledText*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::StyledText();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::StyledText*>(t)->DYMO_Label_Framework::StyledText::~StyledText();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::StyledText;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::StyledText*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::StyledText*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::IDateTimeObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::IDateTimeObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::IDateTimeObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::IDateTimeObject*>(t)->DYMO_Label_Framework::IDateTimeObject::~IDateTimeObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::IDateTimeObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::IDateTimeObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::IDateTimeObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::DateTimeObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::DateTimeObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::DateTimeObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::DateTimeObject*>(t)->DYMO_Label_Framework::DateTimeObject::~DateTimeObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::DateTimeObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::DateTimeObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::DateTimeObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_LabelObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_LabelObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_LabelObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_LabelObject*>(t)->DYMO_Label_Framework::_LabelObject::~_LabelObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_LabelObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_LabelObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_LabelObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_BarcodeObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_BarcodeObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_BarcodeObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_BarcodeObject*>(t)->DYMO_Label_Framework::_BarcodeObject::~_BarcodeObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_BarcodeObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_BarcodeObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_BarcodeObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_AddressObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_AddressObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_AddressObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_AddressObject*>(t)->DYMO_Label_Framework::_AddressObject::~_AddressObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_AddressObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_AddressObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_AddressObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_Rect, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_Rect*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_Rect();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_Rect*>(t)->DYMO_Label_Framework::_Rect::~_Rect();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_Rect;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_Rect*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_Rect*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_TextObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_TextObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_TextObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_TextObject*>(t)->DYMO_Label_Framework::_TextObject::~_TextObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_TextObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_TextObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_TextObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_Printer, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_Printer*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_Printer();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_Printer*>(t)->DYMO_Label_Framework::_Printer::~_Printer();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_Printer;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_Printer*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_Printer*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_PrintJob, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_PrintJob*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_PrintJob();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_PrintJob*>(t)->DYMO_Label_Framework::_PrintJob::~_PrintJob();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_PrintJob;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_PrintJob*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_PrintJob*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_Printers, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_Printers*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_Printers();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_Printers*>(t)->DYMO_Label_Framework::_Printers::~_Printers();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_Printers;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_Printers*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_Printers*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_CircularTextObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_CircularTextObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_CircularTextObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_CircularTextObject*>(t)->DYMO_Label_Framework::_CircularTextObject::~_CircularTextObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_CircularTextObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_CircularTextObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_CircularTextObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_LabelWriterPrintParams, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_LabelWriterPrintParams*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_LabelWriterPrintParams();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_LabelWriterPrintParams*>(t)->DYMO_Label_Framework::_LabelWriterPrintParams::~_LabelWriterPrintParams();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_LabelWriterPrintParams;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_LabelWriterPrintParams*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_LabelWriterPrintParams*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_TapePrintParams, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_TapePrintParams*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_TapePrintParams();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_TapePrintParams*>(t)->DYMO_Label_Framework::_TapePrintParams::~_TapePrintParams();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_TapePrintParams;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_TapePrintParams*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_TapePrintParams*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_LabelRenderParams, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_LabelRenderParams*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_LabelRenderParams();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_LabelRenderParams*>(t)->DYMO_Label_Framework::_LabelRenderParams::~_LabelRenderParams();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_LabelRenderParams;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_LabelRenderParams*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_LabelRenderParams*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_LabelWriterPrinter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_LabelWriterPrinter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_LabelWriterPrinter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_LabelWriterPrinter*>(t)->DYMO_Label_Framework::_LabelWriterPrinter::~_LabelWriterPrinter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_LabelWriterPrinter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_LabelWriterPrinter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_LabelWriterPrinter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_DieCutLabel, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_DieCutLabel*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_DieCutLabel();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_DieCutLabel*>(t)->DYMO_Label_Framework::_DieCutLabel::~_DieCutLabel();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_DieCutLabel;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_DieCutLabel*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_DieCutLabel*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_WebProxy, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_WebProxy*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_WebProxy();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_WebProxy*>(t)->DYMO_Label_Framework::_WebProxy::~_WebProxy();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_WebProxy;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_WebProxy*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_WebProxy*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_Framework, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_Framework*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_Framework();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_Framework*>(t)->DYMO_Label_Framework::_Framework::~_Framework();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_Framework;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_Framework*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_Framework*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_Color, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_Color*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_Color();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_Color*>(t)->DYMO_Label_Framework::_Color::~_Color();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_Color;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_Color*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_Color*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_ContinuousLabelCellList, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_ContinuousLabelCellList*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_ContinuousLabelCellList();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_ContinuousLabelCellList*>(t)->DYMO_Label_Framework::_ContinuousLabelCellList::~_ContinuousLabelCellList();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_ContinuousLabelCellList;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_ContinuousLabelCellList*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_ContinuousLabelCellList*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_ContinuousLabelCell, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_ContinuousLabelCell*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_ContinuousLabelCell();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_ContinuousLabelCell*>(t)->DYMO_Label_Framework::_ContinuousLabelCell::~_ContinuousLabelCell();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_ContinuousLabelCell;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_ContinuousLabelCell*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_ContinuousLabelCell*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_Thickness, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_Thickness*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_Thickness();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_Thickness*>(t)->DYMO_Label_Framework::_Thickness::~_Thickness();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_Thickness;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_Thickness*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_Thickness*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_FontInfo, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_FontInfo*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_FontInfo();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_FontInfo*>(t)->DYMO_Label_Framework::_FontInfo::~_FontInfo();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_FontInfo;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_FontInfo*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_FontInfo*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_ShapeObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_ShapeObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_ShapeObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_ShapeObject*>(t)->DYMO_Label_Framework::_ShapeObject::~_ShapeObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_ShapeObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_ShapeObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_ShapeObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_LabelRecordBuilder, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_LabelRecordBuilder*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_LabelRecordBuilder();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_LabelRecordBuilder*>(t)->DYMO_Label_Framework::_LabelRecordBuilder::~_LabelRecordBuilder();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_LabelRecordBuilder;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_LabelRecordBuilder*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_LabelRecordBuilder*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_LabelSetBuilder, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_LabelSetBuilder*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_LabelSetBuilder();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_LabelSetBuilder*>(t)->DYMO_Label_Framework::_LabelSetBuilder::~_LabelSetBuilder();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_LabelSetBuilder;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_LabelSetBuilder*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_LabelSetBuilder*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_StringList, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_StringList*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_StringList();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_StringList*>(t)->DYMO_Label_Framework::_StringList::~_StringList();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_StringList;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_StringList*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_StringList*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_LabelObjects, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_LabelObjects*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_LabelObjects();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_LabelObjects*>(t)->DYMO_Label_Framework::_LabelObjects::~_LabelObjects();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_LabelObjects;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_LabelObjects*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_LabelObjects*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_TapePrinter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_TapePrinter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_TapePrinter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_TapePrinter*>(t)->DYMO_Label_Framework::_TapePrinter::~_TapePrinter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_TapePrinter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_TapePrinter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_TapePrinter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_ImageObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_ImageObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_ImageObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_ImageObject*>(t)->DYMO_Label_Framework::_ImageObject::~_ImageObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_ImageObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_ImageObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_ImageObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_CounterObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_CounterObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_CounterObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_CounterObject*>(t)->DYMO_Label_Framework::_CounterObject::~_CounterObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_CounterObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_CounterObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_CounterObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_ContinuousLabel, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_ContinuousLabel*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_ContinuousLabel();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_ContinuousLabel*>(t)->DYMO_Label_Framework::_ContinuousLabel::~_ContinuousLabel();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_ContinuousLabel;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_ContinuousLabel*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_ContinuousLabel*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_StyledTextBlock, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_StyledTextBlock*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_StyledTextBlock();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_StyledTextBlock*>(t)->DYMO_Label_Framework::_StyledTextBlock::~_StyledTextBlock();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_StyledTextBlock;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_StyledTextBlock*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_StyledTextBlock*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_StyledTextBuilder, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_StyledTextBuilder*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_StyledTextBuilder();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_StyledTextBuilder*>(t)->DYMO_Label_Framework::_StyledTextBuilder::~_StyledTextBuilder();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_StyledTextBuilder;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_StyledTextBuilder*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_StyledTextBuilder*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_StyledText, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_StyledText*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_StyledText();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_StyledText*>(t)->DYMO_Label_Framework::_StyledText::~_StyledText();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_StyledText;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_StyledText*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_StyledText*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DYMO_Label_Framework::_DateTimeObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<DYMO_Label_Framework::_DateTimeObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new DYMO_Label_Framework::_DateTimeObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DYMO_Label_Framework::_DateTimeObject*>(t)->DYMO_Label_Framework::_DateTimeObject::~_DateTimeObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DYMO_Label_Framework::_DateTimeObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DYMO_Label_Framework::_DateTimeObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DYMO_Label_Framework::_DateTimeObject*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

